{
  "noir_version": "1.0.0-beta.3+ceaa1986628197bd1170147f6a07f0f98d21030a",
  "hash": 14494420829632548906,
  "abi": {
    "parameters": [
      { "name": "secret_key", "type": { "kind": "field" }, "visibility": "private" },
      {
        "name": "index_bits",
        "type": { "kind": "array", "length": 6, "type": { "kind": "integer", "sign": "unsigned", "width": 1 } },
        "visibility": "private"
      },
      {
        "name": "hash_path",
        "type": { "kind": "array", "length": 6, "type": { "kind": "field" } },
        "visibility": "private"
      },
      {
        "name": "merkle_proof_length",
        "type": { "kind": "integer", "sign": "unsigned", "width": 32 },
        "visibility": "private"
      },
      { "name": "hashed_scope", "type": { "kind": "field" }, "visibility": "public" },
      { "name": "hashed_message", "type": { "kind": "field" }, "visibility": "public" }
    ],
    "return_type": {
      "abi_type": { "kind": "tuple", "fields": [{ "kind": "field" }, { "kind": "field" }] },
      "visibility": "public"
    },
    "error_types": {
      "2920182694213909827": { "error_kind": "string", "string": "attempt to subtract with overflow" },
      "5019202896831570965": { "error_kind": "string", "string": "attempt to add with overflow" },
      "6485997221020871071": { "error_kind": "string", "string": "call to assert_max_bit_size" },
      "16761564377371454734": { "error_kind": "string", "string": "Array index out of bounds" },
      "17843811134343075018": { "error_kind": "string", "string": "Stack too deep" }
    }
  },
  "bytecode": "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",
  "debug_symbols": "",
  "file_map": {
    "17": {
      "source": "use crate::field::field_less_than;\nuse crate::runtime::is_unconstrained;\n\n// The low and high decomposition of the field modulus\nglobal PLO: Field = 53438638232309528389504892708671455233;\nglobal PHI: Field = 64323764613183177041862057485226039389;\n\npub(crate) global TWO_POW_128: Field = 0x100000000000000000000000000000000;\nglobal TWO_POW_64: Field = 0x10000000000000000;\n\n// Decomposes a single field into two 16 byte fields.\nfn compute_decomposition(mut x: Field) -> (Field, Field) {\n    // Here's we're taking advantage of truncating 64 bit limbs from the input field\n    // and then subtracting them from the input such the field division is equivalent to integer division.\n    let low_lower_64 = (x as u64) as Field;\n    x = (x - low_lower_64) / TWO_POW_64;\n    let low_upper_64 = (x as u64) as Field;\n\n    let high = (x - low_upper_64) / TWO_POW_64;\n    let low = low_upper_64 * TWO_POW_64 + low_lower_64;\n\n    (low, high)\n}\n\npub(crate) unconstrained fn decompose_hint(x: Field) -> (Field, Field) {\n    compute_decomposition(x)\n}\n\nunconstrained fn lte_hint(x: Field, y: Field) -> bool {\n    if x == y {\n        true\n    } else {\n        field_less_than(x, y)\n    }\n}\n\n// Assert that (alo > blo && ahi >= bhi) || (alo <= blo && ahi > bhi)\nfn assert_gt_limbs(a: (Field, Field), b: (Field, Field)) {\n    let (alo, ahi) = a;\n    let (blo, bhi) = b;\n    // Safety: borrow is enforced to be boolean due to its type.\n    // if borrow is 0, it asserts that (alo > blo && ahi >= bhi)\n    // if borrow is 1, it asserts that (alo <= blo && ahi > bhi)\n    unsafe {\n        let borrow = lte_hint(alo, blo);\n\n        let rlo = alo - blo - 1 + (borrow as Field) * TWO_POW_128;\n        let rhi = ahi - bhi - (borrow as Field);\n\n        rlo.assert_max_bit_size::<128>();\n        rhi.assert_max_bit_size::<128>();\n    }\n}\n\n/// Decompose a single field into two 16 byte fields.\npub fn decompose(x: Field) -> (Field, Field) {\n    if is_unconstrained() {\n        compute_decomposition(x)\n    } else {\n        // Safety: decomposition is properly checked below\n        unsafe {\n            // Take hints of the decomposition\n            let (xlo, xhi) = decompose_hint(x);\n\n            // Range check the limbs\n            xlo.assert_max_bit_size::<128>();\n            xhi.assert_max_bit_size::<128>();\n\n            // Check that the decomposition is correct\n            assert_eq(x, xlo + TWO_POW_128 * xhi);\n\n            // Assert that the decomposition of P is greater than the decomposition of x\n            assert_gt_limbs((PLO, PHI), (xlo, xhi));\n            (xlo, xhi)\n        }\n    }\n}\n\npub fn assert_gt(a: Field, b: Field) {\n    if is_unconstrained() {\n        assert(\n            // Safety: already unconstrained\n            unsafe { field_less_than(b, a) },\n        );\n    } else {\n        // Decompose a and b\n        let a_limbs = decompose(a);\n        let b_limbs = decompose(b);\n\n        // Assert that a_limbs is greater than b_limbs\n        assert_gt_limbs(a_limbs, b_limbs)\n    }\n}\n\npub fn assert_lt(a: Field, b: Field) {\n    assert_gt(b, a);\n}\n\npub fn gt(a: Field, b: Field) -> bool {\n    if is_unconstrained() {\n        // Safety: unsafe in unconstrained\n        unsafe {\n            field_less_than(b, a)\n        }\n    } else if a == b {\n        false\n    } else {\n        // Safety: Take a hint of the comparison and verify it\n        unsafe {\n            if field_less_than(a, b) {\n                assert_gt(b, a);\n                false\n            } else {\n                assert_gt(a, b);\n                true\n            }\n        }\n    }\n}\n\npub fn lt(a: Field, b: Field) -> bool {\n    gt(b, a)\n}\n\nmod tests {\n    // TODO: Allow imports from \"super\"\n    use crate::field::bn254::{assert_gt, decompose, gt, lte_hint, PHI, PLO, TWO_POW_128};\n\n    #[test]\n    fn check_decompose() {\n        assert_eq(decompose(TWO_POW_128), (0, 1));\n        assert_eq(decompose(TWO_POW_128 + 0x1234567890), (0x1234567890, 1));\n        assert_eq(decompose(0x1234567890), (0x1234567890, 0));\n    }\n\n    #[test]\n    unconstrained fn check_decompose_unconstrained() {\n        assert_eq(decompose(TWO_POW_128), (0, 1));\n        assert_eq(decompose(TWO_POW_128 + 0x1234567890), (0x1234567890, 1));\n        assert_eq(decompose(0x1234567890), (0x1234567890, 0));\n    }\n\n    #[test]\n    unconstrained fn check_lte_hint() {\n        assert(lte_hint(0, 1));\n        assert(lte_hint(0, 0x100));\n        assert(lte_hint(0x100, TWO_POW_128 - 1));\n        assert(!lte_hint(0 - 1, 0));\n\n        assert(lte_hint(0, 0));\n        assert(lte_hint(0x100, 0x100));\n        assert(lte_hint(0 - 1, 0 - 1));\n    }\n\n    #[test]\n    fn check_assert_gt() {\n        assert_gt(1, 0);\n        assert_gt(0x100, 0);\n        assert_gt((0 - 1), (0 - 2));\n        assert_gt(TWO_POW_128, 0);\n        assert_gt(0 - 1, 0);\n    }\n\n    #[test]\n    unconstrained fn check_assert_gt_unconstrained() {\n        assert_gt(1, 0);\n        assert_gt(0x100, 0);\n        assert_gt((0 - 1), (0 - 2));\n        assert_gt(TWO_POW_128, 0);\n        assert_gt(0 - 1, 0);\n    }\n\n    #[test]\n    fn check_gt() {\n        assert(gt(1, 0));\n        assert(gt(0x100, 0));\n        assert(gt((0 - 1), (0 - 2)));\n        assert(gt(TWO_POW_128, 0));\n        assert(!gt(0, 0));\n        assert(!gt(0, 0x100));\n        assert(gt(0 - 1, 0 - 2));\n        assert(!gt(0 - 2, 0 - 1));\n    }\n\n    #[test]\n    unconstrained fn check_gt_unconstrained() {\n        assert(gt(1, 0));\n        assert(gt(0x100, 0));\n        assert(gt((0 - 1), (0 - 2)));\n        assert(gt(TWO_POW_128, 0));\n        assert(!gt(0, 0));\n        assert(!gt(0, 0x100));\n        assert(gt(0 - 1, 0 - 2));\n        assert(!gt(0 - 2, 0 - 1));\n    }\n\n    #[test]\n    fn check_plo_phi() {\n        assert_eq(PLO + PHI * TWO_POW_128, 0);\n        let p_bytes = crate::field::modulus_le_bytes();\n        let mut p_low: Field = 0;\n        let mut p_high: Field = 0;\n\n        let mut offset = 1;\n        for i in 0..16 {\n            p_low += (p_bytes[i] as Field) * offset;\n            p_high += (p_bytes[i + 16] as Field) * offset;\n            offset *= 256;\n        }\n        assert_eq(p_low, PLO);\n        assert_eq(p_high, PHI);\n    }\n}\n",
      "path": "std/field/bn254.nr"
    },
    "18": {
      "source": "pub mod bn254;\nuse crate::{runtime::is_unconstrained, static_assert};\nuse bn254::lt as bn254_lt;\n\nimpl Field {\n    /// Asserts that `self` can be represented in `bit_size` bits.\n    ///\n    /// # Failures\n    /// Causes a constraint failure for `Field` values exceeding `2^{bit_size}`.\n    // docs:start:assert_max_bit_size\n    pub fn assert_max_bit_size<let BIT_SIZE: u32>(self) {\n        // docs:end:assert_max_bit_size\n        static_assert(\n            BIT_SIZE < modulus_num_bits() as u32,\n            \"BIT_SIZE must be less than modulus_num_bits\",\n        );\n        self.__assert_max_bit_size(BIT_SIZE);\n    }\n\n    #[builtin(apply_range_constraint)]\n    fn __assert_max_bit_size(self, bit_size: u32) {}\n\n    /// Decomposes `self` into its little endian bit decomposition as a `[u1; N]` array.\n    /// This slice will be zero padded should not all bits be necessary to represent `self`.\n    ///\n    /// # Failures\n    /// Causes a constraint failure for `Field` values exceeding `2^N` as the resulting slice will not\n    /// be able to represent the original `Field`.\n    ///\n    /// # Safety\n    /// Values of `N` equal to or greater than the number of bits necessary to represent the `Field` modulus\n    /// (e.g. 254 for the BN254 field) allow for multiple bit decompositions. This is due to how the `Field` will\n    /// wrap around due to overflow when verifying the decomposition.\n    #[builtin(to_le_bits)]\n    fn _to_le_bits<let N: u32>(self: Self) -> [u1; N] {}\n\n    /// Decomposes `self` into its big endian bit decomposition as a `[u1; N]` array.\n    /// This array will be zero padded should not all bits be necessary to represent `self`.\n    ///\n    /// # Failures\n    /// Causes a constraint failure for `Field` values exceeding `2^N` as the resulting slice will not\n    /// be able to represent the original `Field`.\n    ///\n    /// # Safety\n    /// Values of `N` equal to or greater than the number of bits necessary to represent the `Field` modulus\n    /// (e.g. 254 for the BN254 field) allow for multiple bit decompositions. This is due to how the `Field` will\n    /// wrap around due to overflow when verifying the decomposition.\n    #[builtin(to_be_bits)]\n    fn _to_be_bits<let N: u32>(self: Self) -> [u1; N] {}\n\n    /// Decomposes `self` into its little endian bit decomposition as a `[u1; N]` array.\n    /// This slice will be zero padded should not all bits be necessary to represent `self`.\n    ///\n    /// # Failures\n    /// Causes a constraint failure for `Field` values exceeding `2^N` as the resulting slice will not\n    /// be able to represent the original `Field`.\n    ///\n    /// # Safety\n    /// The bit decomposition returned is canonical and is guaranteed to not overflow the modulus.\n    // docs:start:to_le_bits\n    pub fn to_le_bits<let N: u32>(self: Self) -> [u1; N] {\n        // docs:end:to_le_bits\n        let bits = self._to_le_bits();\n\n        if !is_unconstrained() {\n            // Ensure that the byte decomposition does not overflow the modulus\n            let p = modulus_le_bits();\n            assert(bits.len() <= p.len());\n            let mut ok = bits.len() != p.len();\n            for i in 0..N {\n                if !ok {\n                    if (bits[N - 1 - i] != p[N - 1 - i]) {\n                        assert(p[N - 1 - i] == 1);\n                        ok = true;\n                    }\n                }\n            }\n            assert(ok);\n        }\n        bits\n    }\n\n    /// Decomposes `self` into its big endian bit decomposition as a `[u1; N]` array.\n    /// This array will be zero padded should not all bits be necessary to represent `self`.\n    ///\n    /// # Failures\n    /// Causes a constraint failure for `Field` values exceeding `2^N` as the resulting slice will not\n    /// be able to represent the original `Field`.\n    ///\n    /// # Safety\n    /// The bit decomposition returned is canonical and is guaranteed to not overflow the modulus.\n    // docs:start:to_be_bits\n    pub fn to_be_bits<let N: u32>(self: Self) -> [u1; N] {\n        // docs:end:to_be_bits\n        let bits = self._to_be_bits();\n\n        if !is_unconstrained() {\n            // Ensure that the decomposition does not overflow the modulus\n            let p = modulus_be_bits();\n            assert(bits.len() <= p.len());\n            let mut ok = bits.len() != p.len();\n            for i in 0..N {\n                if !ok {\n                    if (bits[i] != p[i]) {\n                        assert(p[i] == 1);\n                        ok = true;\n                    }\n                }\n            }\n            assert(ok);\n        }\n        bits\n    }\n\n    /// Decomposes `self` into its little endian byte decomposition as a `[u8;N]` array\n    /// This array will be zero padded should not all bytes be necessary to represent `self`.\n    ///\n    /// # Failures\n    ///  The length N of the array must be big enough to contain all the bytes of the 'self',\n    ///  and no more than the number of bytes required to represent the field modulus\n    ///\n    /// # Safety\n    /// The result is ensured to be the canonical decomposition of the field element\n    // docs:start:to_le_bytes\n    pub fn to_le_bytes<let N: u32>(self: Self) -> [u8; N] {\n        // docs:end:to_le_bytes\n        static_assert(\n            N <= modulus_le_bytes().len(),\n            \"N must be less than or equal to modulus_le_bytes().len()\",\n        );\n        // Compute the byte decomposition\n        let bytes = self.to_le_radix(256);\n\n        if !is_unconstrained() {\n            // Ensure that the byte decomposition does not overflow the modulus\n            let p = modulus_le_bytes();\n            assert(bytes.len() <= p.len());\n            let mut ok = bytes.len() != p.len();\n            for i in 0..N {\n                if !ok {\n                    if (bytes[N - 1 - i] != p[N - 1 - i]) {\n                        assert(bytes[N - 1 - i] < p[N - 1 - i]);\n                        ok = true;\n                    }\n                }\n            }\n            assert(ok);\n        }\n        bytes\n    }\n\n    /// Decomposes `self` into its big endian byte decomposition as a `[u8;N]` array of length required to represent the field modulus\n    /// This array will be zero padded should not all bytes be necessary to represent `self`.\n    ///\n    /// # Failures\n    ///  The length N of the array must be big enough to contain all the bytes of the 'self',\n    ///  and no more than the number of bytes required to represent the field modulus\n    ///\n    /// # Safety\n    /// The result is ensured to be the canonical decomposition of the field element\n    // docs:start:to_be_bytes\n    pub fn to_be_bytes<let N: u32>(self: Self) -> [u8; N] {\n        // docs:end:to_be_bytes\n        static_assert(\n            N <= modulus_le_bytes().len(),\n            \"N must be less than or equal to modulus_le_bytes().len()\",\n        );\n        // Compute the byte decomposition\n        let bytes = self.to_be_radix(256);\n\n        if !is_unconstrained() {\n            // Ensure that the byte decomposition does not overflow the modulus\n            let p = modulus_be_bytes();\n            assert(bytes.len() <= p.len());\n            let mut ok = bytes.len() != p.len();\n            for i in 0..N {\n                if !ok {\n                    if (bytes[i] != p[i]) {\n                        assert(bytes[i] < p[i]);\n                        ok = true;\n                    }\n                }\n            }\n            assert(ok);\n        }\n        bytes\n    }\n\n    // docs:start:to_le_radix\n    pub fn to_le_radix<let N: u32>(self: Self, radix: u32) -> [u8; N] {\n        // Brillig does not need an immediate radix\n        if !crate::runtime::is_unconstrained() {\n            static_assert(1 < radix, \"radix must be greater than 1\");\n            static_assert(radix <= 256, \"radix must be less than or equal to 256\");\n            static_assert(radix & (radix - 1) == 0, \"radix must be a power of 2\");\n        }\n        self.__to_le_radix(radix)\n    }\n    // docs:end:to_le_radix\n\n    // docs:start:to_be_radix\n    pub fn to_be_radix<let N: u32>(self: Self, radix: u32) -> [u8; N] {\n        // Brillig does not need an immediate radix\n        if !crate::runtime::is_unconstrained() {\n            crate::assert_constant(radix);\n        }\n        self.__to_be_radix(radix)\n    }\n    // docs:end:to_be_radix\n\n    // `_radix` must be less than 256\n    #[builtin(to_le_radix)]\n    fn __to_le_radix<let N: u32>(self, radix: u32) -> [u8; N] {}\n\n    // `_radix` must be less than 256\n    #[builtin(to_be_radix)]\n    fn __to_be_radix<let N: u32>(self, radix: u32) -> [u8; N] {}\n\n    // Returns self to the power of the given exponent value.\n    // Caution: we assume the exponent fits into 32 bits\n    // using a bigger bit size impacts negatively the performance and should be done only if the exponent does not fit in 32 bits\n    pub fn pow_32(self, exponent: Field) -> Field {\n        let mut r: Field = 1;\n        let b: [u1; 32] = exponent.to_le_bits();\n\n        for i in 1..33 {\n            r *= r;\n            r = (b[32 - i] as Field) * (r * self) + (1 - b[32 - i] as Field) * r;\n        }\n        r\n    }\n\n    // Parity of (prime) Field element, i.e. sgn0(x mod p) = 0 if x `elem` {0, ..., p-1} is even, otherwise sgn0(x mod p) = 1.\n    pub fn sgn0(self) -> u1 {\n        self as u1\n    }\n\n    pub fn lt(self, another: Field) -> bool {\n        if crate::compat::is_bn254() {\n            bn254_lt(self, another)\n        } else {\n            lt_fallback(self, another)\n        }\n    }\n\n    /// Convert a little endian byte array to a field element.\n    /// If the provided byte array overflows the field modulus then the Field will silently wrap around.\n    pub fn from_le_bytes<let N: u32>(bytes: [u8; N]) -> Field {\n        static_assert(\n            N <= modulus_le_bytes().len(),\n            \"N must be less than or equal to modulus_le_bytes().len()\",\n        );\n        let mut v = 1;\n        let mut result = 0;\n\n        for i in 0..N {\n            result += (bytes[i] as Field) * v;\n            v = v * 256;\n        }\n        result\n    }\n\n    /// Convert a big endian byte array to a field element.\n    /// If the provided byte array overflows the field modulus then the Field will silently wrap around.\n    pub fn from_be_bytes<let N: u32>(bytes: [u8; N]) -> Field {\n        let mut v = 1;\n        let mut result = 0;\n\n        for i in 0..N {\n            result += (bytes[N - 1 - i] as Field) * v;\n            v = v * 256;\n        }\n        result\n    }\n}\n\n#[builtin(modulus_num_bits)]\npub comptime fn modulus_num_bits() -> u64 {}\n\n#[builtin(modulus_be_bits)]\npub comptime fn modulus_be_bits() -> [u1] {}\n\n#[builtin(modulus_le_bits)]\npub comptime fn modulus_le_bits() -> [u1] {}\n\n#[builtin(modulus_be_bytes)]\npub comptime fn modulus_be_bytes() -> [u8] {}\n\n#[builtin(modulus_le_bytes)]\npub comptime fn modulus_le_bytes() -> [u8] {}\n\n/// An unconstrained only built in to efficiently compare fields.\n#[builtin(field_less_than)]\nunconstrained fn __field_less_than(x: Field, y: Field) -> bool {}\n\npub(crate) unconstrained fn field_less_than(x: Field, y: Field) -> bool {\n    __field_less_than(x, y)\n}\n\n// Convert a 32 byte array to a field element by modding\npub fn bytes32_to_field(bytes32: [u8; 32]) -> Field {\n    // Convert it to a field element\n    let mut v = 1;\n    let mut high = 0 as Field;\n    let mut low = 0 as Field;\n\n    for i in 0..16 {\n        high = high + (bytes32[15 - i] as Field) * v;\n        low = low + (bytes32[16 + 15 - i] as Field) * v;\n        v = v * 256;\n    }\n    // Abuse that a % p + b % p = (a + b) % p and that low < p\n    low + high * v\n}\n\nfn lt_fallback(x: Field, y: Field) -> bool {\n    if is_unconstrained() {\n        // Safety: unconstrained context\n        unsafe {\n            field_less_than(x, y)\n        }\n    } else {\n        let x_bytes: [u8; 32] = x.to_le_bytes();\n        let y_bytes: [u8; 32] = y.to_le_bytes();\n        let mut x_is_lt = false;\n        let mut done = false;\n        for i in 0..32 {\n            if (!done) {\n                let x_byte = x_bytes[32 - 1 - i] as u8;\n                let y_byte = y_bytes[32 - 1 - i] as u8;\n                let bytes_match = x_byte == y_byte;\n                if !bytes_match {\n                    x_is_lt = x_byte < y_byte;\n                    done = true;\n                }\n            }\n        }\n        x_is_lt\n    }\n}\n\nmod tests {\n    use crate::{panic::panic, runtime};\n    use super::field_less_than;\n\n    #[test]\n    // docs:start:to_be_bits_example\n    fn test_to_be_bits() {\n        let field = 2;\n        let bits: [u1; 8] = field.to_be_bits();\n        assert_eq(bits, [0, 0, 0, 0, 0, 0, 1, 0]);\n    }\n    // docs:end:to_be_bits_example\n\n    #[test]\n    // docs:start:to_le_bits_example\n    fn test_to_le_bits() {\n        let field = 2;\n        let bits: [u1; 8] = field.to_le_bits();\n        assert_eq(bits, [0, 1, 0, 0, 0, 0, 0, 0]);\n    }\n    // docs:end:to_le_bits_example\n\n    #[test]\n    // docs:start:to_be_bytes_example\n    fn test_to_be_bytes() {\n        let field = 2;\n        let bytes: [u8; 8] = field.to_be_bytes();\n        assert_eq(bytes, [0, 0, 0, 0, 0, 0, 0, 2]);\n        assert_eq(Field::from_be_bytes::<8>(bytes), field);\n    }\n    // docs:end:to_be_bytes_example\n\n    #[test]\n    // docs:start:to_le_bytes_example\n    fn test_to_le_bytes() {\n        let field = 2;\n        let bytes: [u8; 8] = field.to_le_bytes();\n        assert_eq(bytes, [2, 0, 0, 0, 0, 0, 0, 0]);\n        assert_eq(Field::from_le_bytes::<8>(bytes), field);\n    }\n    // docs:end:to_le_bytes_example\n\n    #[test]\n    // docs:start:to_be_radix_example\n    fn test_to_be_radix() {\n        // 259, in base 256, big endian, is [1, 3].\n        // i.e. 3 * 256^0 + 1 * 256^1\n        let field = 259;\n\n        // The radix (in this example, 256) must be a power of 2.\n        // The length of the returned byte array can be specified to be\n        // >= the amount of space needed.\n        let bytes: [u8; 8] = field.to_be_radix(256);\n        assert_eq(bytes, [0, 0, 0, 0, 0, 0, 1, 3]);\n        assert_eq(Field::from_be_bytes::<8>(bytes), field);\n    }\n    // docs:end:to_be_radix_example\n\n    #[test]\n    // docs:start:to_le_radix_example\n    fn test_to_le_radix() {\n        // 259, in base 256, little endian, is [3, 1].\n        // i.e. 3 * 256^0 + 1 * 256^1\n        let field = 259;\n\n        // The radix (in this example, 256) must be a power of 2.\n        // The length of the returned byte array can be specified to be\n        // >= the amount of space needed.\n        let bytes: [u8; 8] = field.to_le_radix(256);\n        assert_eq(bytes, [3, 1, 0, 0, 0, 0, 0, 0]);\n        assert_eq(Field::from_le_bytes::<8>(bytes), field);\n    }\n    // docs:end:to_le_radix_example\n\n    #[test(should_fail_with = \"radix must be greater than 1\")]\n    fn test_to_le_radix_1() {\n        // this test should only fail in constrained mode\n        if !runtime::is_unconstrained() {\n            let field = 2;\n            let _: [u8; 8] = field.to_le_radix(1);\n        } else {\n            panic(f\"radix must be greater than 1\");\n        }\n    }\n\n    // TODO: Update this test to account for the Brillig restriction that the radix must be greater than 2\n    //#[test]\n    //fn test_to_le_radix_brillig_1() {\n    //    // this test should only fail in constrained mode\n    //    if runtime::is_unconstrained() {\n    //        let field = 1;\n    //        let out: [u8; 8] = field.to_le_radix(1);\n    //        crate::println(out);\n    //        let expected = [0; 8];\n    //        assert(out == expected, \"unexpected result\");\n    //    }\n    //}\n\n    #[test(should_fail_with = \"radix must be a power of 2\")]\n    fn test_to_le_radix_3() {\n        // this test should only fail in constrained mode\n        if !runtime::is_unconstrained() {\n            let field = 2;\n            let _: [u8; 8] = field.to_le_radix(3);\n        } else {\n            panic(f\"radix must be a power of 2\");\n        }\n    }\n\n    #[test]\n    fn test_to_le_radix_brillig_3() {\n        // this test should only fail in constrained mode\n        if runtime::is_unconstrained() {\n            let field = 1;\n            let out: [u8; 8] = field.to_le_radix(3);\n            let mut expected = [0; 8];\n            expected[0] = 1;\n            assert(out == expected, \"unexpected result\");\n        }\n    }\n\n    #[test(should_fail_with = \"radix must be less than or equal to 256\")]\n    fn test_to_le_radix_512() {\n        // this test should only fail in constrained mode\n        if !runtime::is_unconstrained() {\n            let field = 2;\n            let _: [u8; 8] = field.to_le_radix(512);\n        } else {\n            panic(f\"radix must be less than or equal to 256\")\n        }\n    }\n\n    // TODO: Update this test to account for the Brillig restriction that the radix must be less than 512\n    //#[test]\n    //fn test_to_le_radix_brillig_512() {\n    //    // this test should only fail in constrained mode\n    //    if runtime::is_unconstrained() {\n    //        let field = 1;\n    //        let out: [u8; 8] = field.to_le_radix(512);\n    //        let mut expected = [0; 8];\n    //        expected[0] = 1;\n    //        assert(out == expected, \"unexpected result\");\n    //    }\n    //}\n\n    #[test]\n    unconstrained fn test_field_less_than() {\n        assert(field_less_than(0, 1));\n        assert(field_less_than(0, 0x100));\n        assert(field_less_than(0x100, 0 - 1));\n        assert(!field_less_than(0 - 1, 0));\n    }\n}\n",
      "path": "std/field/mod.nr"
    },
    "22": {
      "source": "// Instantiations of Poseidon permutation for the prime field of the same order as BN254\nuse crate::hash::poseidon::bn254::consts;\nuse crate::hash::poseidon::permute;\n\n#[field(bn254)]\npub fn x5_2(mut state: [Field; 2]) -> [Field; 2] {\n    state = permute(consts::x5_2_config(), state);\n\n    state\n}\n\n#[field(bn254)]\npub fn x5_3(mut state: [Field; 3]) -> [Field; 3] {\n    state = permute(consts::x5_3_config(), state);\n\n    state\n}\n\n#[field(bn254)]\npub fn x5_4(mut state: [Field; 4]) -> [Field; 4] {\n    state = permute(consts::x5_4_config(), state);\n\n    state\n}\n\n#[field(bn254)]\npub fn x5_5(mut state: [Field; 5]) -> [Field; 5] {\n    state = permute(consts::x5_5_config(), state);\n\n    state\n}\n\n#[field(bn254)]\npub fn x5_6(mut state: [Field; 6]) -> [Field; 6] {\n    state = permute(consts::x5_6_config(), state);\n\n    state\n}\n\n#[field(bn254)]\npub fn x5_7(mut state: [Field; 7]) -> [Field; 7] {\n    state = permute(consts::x5_7_config(), state);\n\n    state\n}\n\n#[field(bn254)]\npub fn x5_8(mut state: [Field; 8]) -> [Field; 8] {\n    state = permute(consts::x5_8_config(), state);\n\n    state\n}\n\n#[field(bn254)]\npub fn x5_9(mut state: [Field; 9]) -> [Field; 9] {\n    state = permute(consts::x5_9_config(), state);\n\n    state\n}\n\n#[field(bn254)]\npub fn x5_10(mut state: [Field; 10]) -> [Field; 10] {\n    state = permute(consts::x5_10_config(), state);\n\n    state\n}\n\n#[field(bn254)]\npub fn x5_11(mut state: [Field; 11]) -> [Field; 11] {\n    state = permute(consts::x5_11_config(), state);\n\n    state\n}\n\n#[field(bn254)]\npub fn x5_12(mut state: [Field; 12]) -> [Field; 12] {\n    state = permute(consts::x5_12_config(), state);\n\n    state\n}\n\n#[field(bn254)]\npub fn x5_13(mut state: [Field; 13]) -> [Field; 13] {\n    state = permute(consts::x5_13_config(), state);\n\n    state\n}\n\n#[field(bn254)]\npub fn x5_14(mut state: [Field; 14]) -> [Field; 14] {\n    state = permute(consts::x5_14_config(), state);\n\n    state\n}\n\n#[field(bn254)]\npub fn x5_15(mut state: [Field; 15]) -> [Field; 15] {\n    state = permute(consts::x5_15_config(), state);\n\n    state\n}\n\n#[field(bn254)]\npub fn x5_16(mut state: [Field; 16]) -> [Field; 16] {\n    state = permute(consts::x5_16_config(), state);\n\n    state\n}\n\n#[field(bn254)]\npub fn x5_17(mut state: [Field; 17]) -> [Field; 17] {\n    state = permute(consts::x5_17_config(), state);\n\n    state\n}\n",
      "path": "std/hash/poseidon/bn254/perm.nr"
    },
    "23": {
      "source": "// Instantiations of Poseidon constants, permutations and sponge for prime field of the same order as BN254\npub mod perm;\npub mod consts;\n\nuse crate::hash::poseidon::absorb;\n\n// Variable-length Poseidon-128 sponge as suggested in second bullet point of section 3 of https://eprint.iacr.org/2019/458.pdf\n#[field(bn254)]\npub fn sponge<let N: u32>(msg: [Field; N]) -> Field {\n    absorb(consts::x5_5_config(), [0; 5], 4, 1, msg)[1]\n}\n\n// Various instances of the Poseidon hash function\n// Consistent with Circom's implementation\n#[no_predicates]\npub fn hash_1(input: [Field; 1]) -> Field {\n    let mut state = [0; 2];\n    for i in 0..input.len() {\n        state[i + 1] = input[i];\n    }\n\n    perm::x5_2(state)[0]\n}\n\n#[no_predicates]\npub fn hash_2(input: [Field; 2]) -> Field {\n    let mut state = [0; 3];\n    for i in 0..input.len() {\n        state[i + 1] = input[i];\n    }\n\n    perm::x5_3(state)[0]\n}\n\n#[no_predicates]\npub fn hash_3(input: [Field; 3]) -> Field {\n    let mut state = [0; 4];\n    for i in 0..input.len() {\n        state[i + 1] = input[i];\n    }\n\n    perm::x5_4(state)[0]\n}\n\n#[no_predicates]\npub fn hash_4(input: [Field; 4]) -> Field {\n    let mut state = [0; 5];\n    for i in 0..input.len() {\n        state[i + 1] = input[i];\n    }\n\n    perm::x5_5(state)[0]\n}\n\n#[no_predicates]\npub fn hash_5(input: [Field; 5]) -> Field {\n    let mut state = [0; 6];\n    for i in 0..input.len() {\n        state[i + 1] = input[i];\n    }\n\n    perm::x5_6(state)[0]\n}\n\n#[no_predicates]\npub fn hash_6(input: [Field; 6]) -> Field {\n    let mut state = [0; 7];\n    for i in 0..input.len() {\n        state[i + 1] = input[i];\n    }\n\n    perm::x5_7(state)[0]\n}\n\n#[no_predicates]\npub fn hash_7(input: [Field; 7]) -> Field {\n    let mut state = [0; 8];\n    for i in 0..input.len() {\n        state[i + 1] = input[i];\n    }\n\n    perm::x5_8(state)[0]\n}\n\n#[no_predicates]\npub fn hash_8(input: [Field; 8]) -> Field {\n    let mut state = [0; 9];\n    for i in 0..input.len() {\n        state[i + 1] = input[i];\n    }\n\n    perm::x5_9(state)[0]\n}\n\n#[no_predicates]\npub fn hash_9(input: [Field; 9]) -> Field {\n    let mut state = [0; 10];\n    for i in 0..input.len() {\n        state[i + 1] = input[i];\n    }\n\n    perm::x5_10(state)[0]\n}\n\n#[no_predicates]\npub fn hash_10(input: [Field; 10]) -> Field {\n    let mut state = [0; 11];\n    for i in 0..input.len() {\n        state[i + 1] = input[i];\n    }\n\n    perm::x5_11(state)[0]\n}\n\n#[no_predicates]\npub fn hash_11(input: [Field; 11]) -> Field {\n    let mut state = [0; 12];\n    for i in 0..input.len() {\n        state[i + 1] = input[i];\n    }\n\n    perm::x5_12(state)[0]\n}\n\n#[no_predicates]\npub fn hash_12(input: [Field; 12]) -> Field {\n    let mut state = [0; 13];\n    for i in 0..input.len() {\n        state[i + 1] = input[i];\n    }\n\n    perm::x5_13(state)[0]\n}\n\n#[no_predicates]\npub fn hash_13(input: [Field; 13]) -> Field {\n    let mut state = [0; 14];\n    for i in 0..input.len() {\n        state[i + 1] = input[i];\n    }\n\n    perm::x5_14(state)[0]\n}\n\n#[no_predicates]\npub fn hash_14(input: [Field; 14]) -> Field {\n    let mut state = [0; 15];\n    for i in 0..input.len() {\n        state[i + 1] = input[i];\n    }\n\n    perm::x5_15(state)[0]\n}\n\n#[no_predicates]\npub fn hash_15(input: [Field; 15]) -> Field {\n    let mut state = [0; 16];\n    for i in 0..input.len() {\n        state[i + 1] = input[i];\n    }\n\n    perm::x5_16(state)[0]\n}\n\n#[no_predicates]\npub fn hash_16(input: [Field; 16]) -> Field {\n    let mut state = [0; 17];\n    for i in 0..input.len() {\n        state[i + 1] = input[i];\n    }\n\n    perm::x5_17(state)[0]\n}\n",
      "path": "std/hash/poseidon/bn254.nr"
    },
    "24": {
      "source": "pub mod bn254; // Instantiations of Poseidon for prime field of the same order as BN254\nuse crate::default::Default;\nuse crate::hash::Hasher;\n\n// A config struct defining the parameters of the Poseidon instance to use.\n//\n// A thorough writeup of this method (along with an unoptimized method) can be found at: https://spec.filecoin.io/algorithms/crypto/poseidon/\npub struct PoseidonConfig<let T: u32, let N: u32, let X: u32> {\n    // State width, should be equal to `T`\n    t: Field,\n    // Number of full rounds. should be even\n    rf: u8,\n    // Number of partial rounds\n    rp: u8,\n    // S-box power; depends on the underlying field\n    alpha: Field,\n    // The round constants for the\n    round_constants: [Field; N],\n    // The MDS matrix for the Poseidon instance\n    mds: [[Field; T]; T],\n    // An MDS matrix which also applies a basis transformation which allows\n    // sparse matrices to be used for the partial rounds.\n    //\n    // This should be applied instead of `mds` in the final full round.\n    presparse_mds: [[Field; T]; T],\n    // A set of sparse matrices used for MDS mixing for the partial rounds.\n    sparse_mds: [Field; X],\n}\n\npub fn config<let T: u32, let N: u32, let X: u32>(\n    t: Field,\n    rf: u8,\n    rp: u8,\n    alpha: Field,\n    round_constants: [Field; N],\n    mds: [[Field; T]; T],\n    presparse_mds: [[Field; T]; T],\n    sparse_mds: [Field; X],\n) -> PoseidonConfig<T, N, X> {\n    // Input checks\n    assert_eq(rf & 1, 0);\n    assert_eq((t as u8) * rf + rp, N as u8);\n    assert_eq(t, T as Field);\n    assert(alpha != 0);\n\n    PoseidonConfig { t, rf, rp, alpha, round_constants, mds, presparse_mds, sparse_mds }\n}\n\npub fn permute<let T: u32, let N: u32, let X: u32>(\n    pos_conf: PoseidonConfig<T, N, X>,\n    mut state: [Field; T],\n) -> [Field; T] {\n    let PoseidonConfig { t, rf, rp, alpha, round_constants, mds, presparse_mds, sparse_mds } =\n        pos_conf;\n\n    for i in 0..state.len() {\n        state[i] += round_constants[i];\n    }\n\n    for _r in 0..rf / 2 - 1 {\n        state = sigma(state);\n        for i in 0..T {\n            state[i] += round_constants[T * (_r + 1) as u32 + i];\n        }\n        state = apply_matrix(mds, state);\n    }\n\n    state = sigma(state);\n    for i in 0..T {\n        state[i] += round_constants[T * (rf / 2) as u32 + i];\n    }\n    state = apply_matrix(presparse_mds, state);\n\n    for i in 0..T {\n        crate::as_witness(state[i]);\n    }\n\n    for _r in 0..rp {\n        state[0] = state[0].pow_32(alpha);\n        state[0] += round_constants[(rf / 2 + 1) as u32 * T + _r as u32];\n        crate::as_witness(state[0]);\n        {\n            let mut newState0 = 0;\n            for j in 0..T {\n                newState0 += sparse_mds[(T * 2 - 1) * _r as u32 + j as u32] * state[j];\n            }\n            for k in 1..T {\n                state[k] += state[0] * sparse_mds[(t * 2 - 1) as u32 * _r as u32 + T + k - 1];\n            }\n            state[0] = newState0;\n\n            if (_r & 1 == 0) {\n                for k in 1..T {\n                    crate::as_witness(state[k]);\n                }\n            }\n        }\n    }\n\n    for _r in 0..rf / 2 - 1 {\n        state = sigma(state);\n        for i in 0..state.len() {\n            state[i] += round_constants[(rf / 2 + 1) as u32 * T + rp as u32 + (_r as u32) * T + i];\n        }\n        state = apply_matrix(mds, state);\n    }\n\n    state = sigma(state);\n    state = apply_matrix(mds, state);\n\n    state\n}\n\n// Performs matrix multiplication on a vector\nfn apply_matrix<let N: u32>(matrix: [[Field; N]; N], vec: [Field; N]) -> [Field; N] {\n    let mut out = [0; N];\n\n    for i in 0..N {\n        for j in 0..N {\n            out[i] += vec[j] * matrix[j][i];\n        }\n    }\n\n    out\n}\n\n// Corresponding absorption.\nfn absorb<let T: u32, let N: u32, let X: u32, let O: u32>(\n    pos_conf: PoseidonConfig<T, N, X>,\n    // Initial state; usually [0; O]\n    mut state: [Field; T],\n    rate: Field,\n    capacity: Field,\n    msg: [Field; O], // Arbitrary length message\n) -> [Field; T] {\n    assert_eq(pos_conf.t, rate + capacity);\n\n    let mut i = 0;\n\n    for k in 0..msg.len() {\n        // Add current block to state\n        state[capacity + i] += msg[k];\n        i = i + 1;\n        // Enough to absorb\n        if i == rate {\n            state = permute(pos_conf, state);\n            i = 0;\n        }\n    }\n    // If we have one more block to permute\n    if i != 0 {\n        state = permute(pos_conf, state);\n    }\n\n    state\n}\n\nfn sigma<let O: u32>(x: [Field; O]) -> [Field; O] {\n    let mut y = x;\n    for i in 0..O {\n        let t = y[i];\n        let tt = t * t;\n        let tttt = tt * tt;\n        y[i] *= tttt;\n    }\n    y\n}\n\npub struct PoseidonHasher {\n    _state: [Field],\n}\n\nimpl Hasher for PoseidonHasher {\n    #[field(bn254)]\n    fn finish(self) -> Field {\n        let mut result = 0;\n        let len = self._state.len();\n        assert(len < 16);\n        if len == 1 {\n            result = bn254::hash_1([self._state[0]]);\n        }\n        if len == 2 {\n            result = bn254::hash_2([self._state[0], self._state[1]]);\n        }\n        if len == 3 {\n            result = bn254::hash_3([self._state[0], self._state[1], self._state[2]]);\n        }\n        if len == 4 {\n            result = bn254::hash_4([self._state[0], self._state[1], self._state[2], self._state[3]]);\n        }\n        if len == 5 {\n            result = bn254::hash_5([\n                self._state[0],\n                self._state[1],\n                self._state[2],\n                self._state[3],\n                self._state[4],\n            ]);\n        }\n        if len == 6 {\n            result = bn254::hash_6([\n                self._state[0],\n                self._state[1],\n                self._state[2],\n                self._state[3],\n                self._state[4],\n                self._state[5],\n            ]);\n        }\n        if len == 7 {\n            result = bn254::hash_7([\n                self._state[0],\n                self._state[1],\n                self._state[2],\n                self._state[3],\n                self._state[4],\n                self._state[5],\n                self._state[6],\n            ]);\n        }\n        if len == 8 {\n            result = bn254::hash_8([\n                self._state[0],\n                self._state[1],\n                self._state[2],\n                self._state[3],\n                self._state[4],\n                self._state[5],\n                self._state[6],\n                self._state[7],\n            ]);\n        }\n        if len == 9 {\n            result = bn254::hash_9([\n                self._state[0],\n                self._state[1],\n                self._state[2],\n                self._state[3],\n                self._state[4],\n                self._state[5],\n                self._state[6],\n                self._state[7],\n                self._state[8],\n            ]);\n        }\n        if len == 10 {\n            result = bn254::hash_10([\n                self._state[0],\n                self._state[1],\n                self._state[2],\n                self._state[3],\n                self._state[4],\n                self._state[5],\n                self._state[6],\n                self._state[7],\n                self._state[8],\n                self._state[9],\n            ]);\n        }\n        if len == 11 {\n            result = bn254::hash_11([\n                self._state[0],\n                self._state[1],\n                self._state[2],\n                self._state[3],\n                self._state[4],\n                self._state[5],\n                self._state[6],\n                self._state[7],\n                self._state[8],\n                self._state[9],\n                self._state[10],\n            ]);\n        }\n        if len == 12 {\n            result = bn254::hash_12([\n                self._state[0],\n                self._state[1],\n                self._state[2],\n                self._state[3],\n                self._state[4],\n                self._state[5],\n                self._state[6],\n                self._state[7],\n                self._state[8],\n                self._state[9],\n                self._state[10],\n                self._state[11],\n            ]);\n        }\n        if len == 13 {\n            result = bn254::hash_13([\n                self._state[0],\n                self._state[1],\n                self._state[2],\n                self._state[3],\n                self._state[4],\n                self._state[5],\n                self._state[6],\n                self._state[7],\n                self._state[8],\n                self._state[9],\n                self._state[10],\n                self._state[11],\n                self._state[12],\n            ]);\n        }\n        if len == 14 {\n            result = bn254::hash_14([\n                self._state[0],\n                self._state[1],\n                self._state[2],\n                self._state[3],\n                self._state[4],\n                self._state[5],\n                self._state[6],\n                self._state[7],\n                self._state[8],\n                self._state[9],\n                self._state[10],\n                self._state[11],\n                self._state[12],\n                self._state[13],\n            ]);\n        }\n        if len == 15 {\n            result = bn254::hash_15([\n                self._state[0],\n                self._state[1],\n                self._state[2],\n                self._state[3],\n                self._state[4],\n                self._state[5],\n                self._state[6],\n                self._state[7],\n                self._state[8],\n                self._state[9],\n                self._state[10],\n                self._state[11],\n                self._state[12],\n                self._state[13],\n                self._state[14],\n            ]);\n        }\n\n        result\n    }\n\n    #[inline_always]\n    fn write(&mut self, input: Field) {\n        self._state = self._state.push_back(input);\n    }\n}\n\nimpl Default for PoseidonHasher {\n    fn default() -> Self {\n        PoseidonHasher { _state: &[] }\n    }\n}\n\nmod poseidon_tests {\n    use crate::hash::poseidon;\n\n    #[test]\n    fn reference_impl_test_vectors() {\n        // hardcoded test vectors from https://extgit.iaik.tugraz.at/krypto/hadeshash/-/blob/master/code/test_vectors.txt\n        {\n            let mut state = [0, 1, 2];\n            let mut expected = [\n                0x115cc0f5e7d690413df64c6b9662e9cf2a3617f2743245519e19607a4417189a,\n                0x0fca49b798923ab0239de1c9e7a4a9a2210312b6a2f616d18b5a87f9b628ae29,\n                0x0e7ae82e40091e63cbd4f16a6d16310b3729d4b6e138fcf54110e2867045a30c,\n            ];\n            assert_eq(\n                expected,\n                poseidon::bn254::perm::x5_3(state),\n                \"Failed to reproduce output for [0, 1, 2]\",\n            );\n        }\n        {\n            let mut state = [0, 1, 2, 3, 4];\n            let mut expected = [\n                0x299c867db6c1fdd79dcefa40e4510b9837e60ebb1ce0663dbaa525df65250465,\n                0x1148aaef609aa338b27dafd89bb98862d8bb2b429aceac47d86206154ffe053d,\n                0x24febb87fed7462e23f6665ff9a0111f4044c38ee1672c1ac6b0637d34f24907,\n                0x0eb08f6d809668a981c186beaf6110060707059576406b248e5d9cf6e78b3d3e,\n                0x07748bc6877c9b82c8b98666ee9d0626ec7f5be4205f79ee8528ef1c4a376fc7,\n            ];\n            assert_eq(\n                expected,\n                poseidon::bn254::perm::x5_5(state),\n                \"Failed to reproduce output for [0, 1, 2, 3, 4]\",\n            );\n        }\n    }\n}\n",
      "path": "std/hash/poseidon/mod.nr"
    },
    "61": {
      "source": "use binary_merkle_root::binary_merkle_root;\nuse ec::bjj::BabyJubJubParams;\nuse ec::Curve;\nuse ec::scalar_field::ScalarField;\nuse std::field::bn254::assert_lt;\nuse std::hash::poseidon::bn254::hash_2 as poseidon;\n\n// The maximum depth of the Merkle Tree the inclusion proof will be coming from.\n// This value can get updated by overwriting this line.\npub global MAX_DEPTH: u32 = 6;\n\n// Generator point of Baby Jubjub curve.\n// ref: https://github.com/noir-lang/noir-edwards/blob/main/src/test.nr#L6C8-L6C13\nglobal BASE8: [Field; 2] = [\n    5299619240641551281634865583518297030282874472190772894086521144482721001553,\n    16950150798460657717958625567821834550301663161624707787222815936182638968203,\n];\n\n// This is a 251 bit value.\nglobal L: Field = 2736030358979909402780800718157159386076813972158567259200215660948447373041;\n\n// There are 3 main steps in the Noir program.\n// - The first part generates the Semaphore identity by obtaining\n//   the public key from the secret key and consequently hash the public key.\n//   This resulting hash is the identity_commitment.\n// - In the second part, it is verified that the identity_commitment is indeed\n//   part of the merkle tree by calculating the merkleRoot using the merkle proof.\n// - In the third part the nullifier is generated by hashing the hashed_scope\n//   with the secret key.\n//\n// There are 4 public values: hashed scope, hashed message, the nullifier and the\n// the Merkle tree root. Whether the scope and message are actually hashed doesn't\n// affect the circuit; the names just match how they're used in the Semaphore SDK.\n//\n// The message is tied to the circuit by adding it as a (public) input to the circuit.\n//\n// Returns: (Merkle tree root, nullifier)\nfn main(\n    secret_key: Field,\n    index_bits: [u1; MAX_DEPTH], // these bits indicate the order of inputs for hashing of the merkle proof\n    hash_path: [Field; MAX_DEPTH], // the Merkle Tree inclusion proof\n    merkle_proof_length: u32, // the number of non-zero elements in hash_path\n    hashed_scope: pub Field,\n    hashed_message: pub Field,\n) -> pub (Field, Field) {\n    // Part 1\n    // Ensure secret_key < l.\n    assert_lt(secret_key, L);\n\n    // Identity generation.\n    // The public key is derived by multiplying the generator point with the secret key,\n    // interpreted as a scalar.\n    let generator: Curve<BabyJubJubParams> = Curve { x: BASE8[0], y: BASE8[1] };\n    // ScalarField is parameterised by the number of 4-bit slices it contains.\n    // Since secret key is already known to be max 251 bits, there are 63 slices.\n    let secret_scalar: ScalarField<63> = ScalarField::from(secret_key);\n    let pubkey = generator.mul(secret_scalar);\n\n    // Obtain the identity commitment by hashing the public key\n    let identity_commitment = poseidon([pubkey.x, pubkey.y]);\n\n    // Part 2\n    // Verifies membership by repeatedly hashing with the elements from the merkle proof.\n    // Depending on the index bit, we swap the siblings for hashing or not.\n    let root = binary_merkle_root(\n        poseidon,\n        identity_commitment,\n        merkle_proof_length,\n        index_bits,\n        hash_path,\n    );\n\n    // Part 3\n    // Obtain the nullifier by hashing the hashed scope and secret key.\n    let nullifier = poseidon([hashed_scope, secret_key]);\n\n    // Return the calculated Merkle tree root & nullifier\n    (root, nullifier)\n}\n\n#[test]\nfn pass_merkleproof_len1() {\n    let secret_key = 2736030358979909402780800718157159386076813972158567259200215660948447373040;\n    let mut index_bits = [0; MAX_DEPTH];\n    index_bits[0] = 1;\n    let mut hash_path = [0; MAX_DEPTH];\n    hash_path[0] = 17197790661637433027297685226742709599380837544520340689137581733613433332983;\n    let merkle_proof_length = 1;\n    let hashed_scope = 32;\n    let message_input = 43;\n\n    let (merkle_root_output, nullifier_output) = main(\n        secret_key,\n        index_bits,\n        hash_path,\n        merkle_proof_length,\n        hashed_scope,\n        message_input,\n    );\n\n    assert(\n        merkle_root_output\n            == 14749601632619677010117355190090900871659822873947496064081607008658671249718,\n    );\n    assert(\n        nullifier_output\n            == 17372857233400574021114979593304691729475458770275659856062929947081629926774,\n    );\n}\n\n#[test]\nfn pass_merkleproof_len2() {\n    let secret_key = 2736030358979909402780800718157159386076813972158567259200215660948447373040;\n    let mut index_bits = [0; MAX_DEPTH];\n    index_bits[0] = 1;\n    index_bits[1] = 1;\n    let mut hash_path = [0; MAX_DEPTH];\n    hash_path[0] = 222;\n    hash_path[1] = 5580148635681152038824579634153994374025422922042242905608547916566050510583;\n    let merkle_proof_length = 2;\n    let hashed_scope = 32;\n    let message_input = 43;\n\n    let (merkle_root_output, nullifier_output) = main(\n        secret_key,\n        index_bits,\n        hash_path,\n        merkle_proof_length,\n        hashed_scope,\n        message_input,\n    );\n\n    assert(\n        merkle_root_output\n            == 15463896243170667872144918581954291954064138644202866266871757140238856236252,\n    );\n    assert(\n        nullifier_output\n            == 17372857233400574021114979593304691729475458770275659856062929947081629926774,\n    );\n}\n\n#[test]\nfn pass_merkleproof_len10() {\n    let secret_key = 2736030358979909402780800718157159386076813972158567259200215660948447373040;\n    let mut index_bits = [1; MAX_DEPTH];\n    let mut hash_path = [0; MAX_DEPTH];\n    hash_path[0] = 1023;\n    hash_path[1] = 7703609393926148861806470850414101587282113463695008072842235608796379066550;\n    hash_path[2] = 11844355347052921836263554861941946966048634969958623466081587590542465759133;\n    hash_path[3] = 19139877065885635288462009770448247355705152266967089952432395406553642434273;\n    hash_path[4] = 15968895708437223385516840363948747630018846839139338811061474982723265688336;\n    hash_path[5] = 1157389113544196424312834359849712044068249869160475042631259223915679649526;\n    hash_path[6] = 9850169485007128596840836882853679679304108948486378818337816937810456934767;\n    hash_path[7] = 7328698264973484546168581905250553935177218888248684409634832044961836320061;\n    hash_path[8] = 3637363514134115024343666241307349483158812906758472113070175697206757306389;\n    hash_path[9] = 7516686158158401448998320090358910253731148596461412688165783659432576569650;\n    let merkle_proof_length = 10;\n    let hashed_scope = 32;\n    let message_input = 43;\n\n    let (merkle_root_output, nullifier_output) = main(\n        secret_key,\n        index_bits,\n        hash_path,\n        merkle_proof_length,\n        hashed_scope,\n        message_input,\n    );\n\n    assert(\n        merkle_root_output\n            == 2057311462964865392236711171061056405638996999335557516757935831793017666139,\n    );\n    assert(\n        nullifier_output\n            == 17372857233400574021114979593304691729475458770275659856062929947081629926774,\n    );\n}\n\n#[test(should_fail)]\nfn fail_secret_key_outofrange() {\n    let secret_key = 2736030358979909402780800718157159386076813972158567259200215660948447373042;\n    let mut index_bits = [0; MAX_DEPTH];\n    index_bits[0] = 1;\n    let mut hash_path = [0; MAX_DEPTH];\n    hash_path[0] = 17197790661637433027297685226742709599380837544520340689137581733613433332983;\n    let merkle_proof_length = 1;\n    let hashed_scope = 32;\n    let message_input = 43;\n\n    let _ = main(\n        secret_key,\n        index_bits,\n        hash_path,\n        merkle_proof_length,\n        hashed_scope,\n        message_input,\n    );\n}\n",
      "path": "/Users/elena/Documents/hashcloak/clients/Aztec/semaphore_grant_related/semaphore-noir/packages/circuits-noir/src/main.nr"
    },
    "63": {
      "source": "// This circuit is designed to calculate the root of a binary Merkle\n// tree given a hash function, a leaf, its depth, and the necessary sibling\n// information (aka proof of membership).\n// A circuit is designed without the capability to iterate through\n// a dynamic array. To address this, a parameter with the static maximum\n// tree depth is defined (i.e. 'MAX_DEPTH'). And additionally, the circuit\n// receives a dynamic depth as an input, which is utilized in calculating the\n// true root of the Merkle tree. The actual depth of the Merkle tree\n// may be equal to or less than the static maximum depth.\npub fn binary_merkle_root<let MAX_DEPTH: u32>(\n    hasher: fn([Field; 2]) -> Field,\n    leaf: Field,\n    depth: u32,\n    indices: [u1; MAX_DEPTH],\n    siblings: [Field; MAX_DEPTH],\n) -> Field {\n    // Start from the leaf node\n    let mut node = leaf;\n\n    // Iterate through the Merkle proof up to MAX_DEPTH\n    for i in 0..MAX_DEPTH {\n        // Only compute hash if the current level is within the tree depth\n        if i < depth {\n            let sibling = siblings[i];\n\n            // Determine the ordering of node and sibling based on the index bit\n            // If indices[i] == 0, node is on the left; otherwise, it's on the right\n            let (left, right) = if indices[i] == 0 {\n                (node, sibling)\n            } else {\n                (sibling, node)\n            };\n\n            // Hash the pair to move one level up the tree\n            node = hasher([left, right]);\n        }\n    }\n\n    // Return the root computed\n    node\n}\n",
      "path": "/Users/elena/nargo/github.com/privacy-scaling-explorations/zk-kit.noir/binary-merkle-root-v0.0.1/packages/binary-merkle-root/src/lib.nr"
    },
    "65": {
      "source": "mod scalar_field;\nmod test;\nmod bjj;\n\npub use crate::scalar_field::ScalarField;\nuse std::ops::{Add, Neg, Sub};\n\npub struct Curve<Params> {\n    x: Field,\n    y: Field,\n}\n\n// ####################################################################################################################\n// ####################################################################################################################\n// ### T R A I T S\n// ####################################################################################################################\n// ####################################################################################################################\n\n/// Parametrises a Twisted Edwards curve\ntrait TECurveParameterTrait {\n    fn a() -> Field; // twisted edward curve parameter a\n    fn d() -> Field; // twisted edward curve parameter d\n    fn gen() -> (Field, Field); // generator point x/y coordinates\n}\n\n/// Defines methods that a valid Curve implementation must satisfy\ntrait CurveTrait<Params>: Add + Sub + Eq + Neg + Default {\n    fn new(x: Field, y: Field) -> Self;\n    fn zero() -> Self;\n    fn one() -> Self;\n    fn dbl(self) -> Self;\n    fn mul<let NScalarSlices: u32>(self, x: ScalarField<NScalarSlices>) -> Self;\n    fn msm<let N: u32, let NScalarSlices: u32>(\n        points: [Self; N],\n        scalars: [ScalarField<NScalarSlices>; N],\n    ) -> Self;\n\n    fn eq(self, x: Self) -> bool {\n        self == x\n    }\n    fn is_zero(self) -> bool {\n        self == Self::zero()\n    }\n\n    fn is_on_curve(self) -> bool;\n    fn assert_is_on_curve(self);\n    fn assert_equal(self, other: Self);\n}\n\n// ####################################################################################################################\n// ####################################################################################################################\n// ### C O N S T R A I N E D    F U N C T I O N S\n// ####################################################################################################################\n// ####################################################################################################################\nimpl<Params> std::default::Default for Curve<Params>\nwhere\n    Params: TECurveParameterTrait,\n{\n    /// Returns point at infinity\n    ///\n    /// Cost: 0 gates\n    fn default() -> Self {\n        Curve::zero()\n    }\n}\n\nimpl<Params> std::ops::Add for Curve<Params>\nwhere\n    Params: TECurveParameterTrait,\n{\n    /// Compute `self + other`\n    ///\n    /// Cost: 7 gates\n    fn add(self, other: Self) -> Self {\n        Curve::add_internal(self, other, Params::a(), Params::d())\n    }\n}\n\nimpl<Params> std::ops::Neg for Curve<Params> {\n    /// Negate a point\n    ///\n    /// Cost: usually 0, will cost 1 gate if the `x` coordinate needs to be converted into a witness\n    fn neg(self) -> Self {\n        Curve { x: -self.x, y: self.y }\n    }\n}\n\nimpl<Params> std::ops::Sub for Curve<Params>\nwhere\n    Params: TECurveParameterTrait,\n{\n    /// Compute `self - other`\n    ///\n    /// Cost: 7 gates\n    fn sub(self, other: Self) -> Self {\n        Curve::add_internal(self, other.neg(), Params::a(), Params::d())\n    }\n}\n\nimpl<Params> std::cmp::Eq for Curve<Params> {\n    /// Compute `self == other`\n    ///\n    /// Cost: 6 gates\n    fn eq(self, other: Self) -> bool {\n        (self.x == other.x) & (self.y == other.y)\n    }\n}\n\nimpl<Params> std::convert::From<(Field, Field)> for Curve<Params> {\n    /// Construct from tuple of field elements\n    ///\n    /// Use this method instead of `new` if you know x/y is on the curve\n    ///\n    /// Cost: 0 gates\n    fn from((x, y): (Field, Field)) -> Self {\n        Curve { x, y }\n    }\n}\n\nimpl<Params> CurveTrait<Params> for Curve<Params>\nwhere\n    Params: TECurveParameterTrait,\n{\n\n    /// Construct a new point\n    ///\n    /// If you know the x/y coords form a valid point DO NOT USE THIS METHOD\n    /// This method calls `assert_is_on_curve` which costs 3 gates.\n    /// Instead, directly construct via Curve{x, y} or use from((x, y))\n    ///\n    /// Cost: 3 gates\n    fn new(x: Field, y: Field) -> Self {\n        let result = Curve { x, y };\n        result.assert_is_on_curve();\n        result\n    }\n\n    /// Return the Identity element (point at infinity)\n    ///\n    /// Cost: 0 gates\n    fn zero() -> Self {\n        Curve { x: 0, y: 1 }\n    }\n\n    /// Return the Generator of the group\n    ///\n    /// Cost: 0 gates (assuming Params trait returns values known at compile time!)\n    fn one() -> Self {\n        let (x, y) = Params::gen();\n        Curve { x, y }\n    }\n\n    /// Validate a point is on the curve\n    ///\n    /// cheaper than `is_on_curve` (assert is cheaper than returning a bool)\n    ///\n    /// Cost: 3 gates\n    fn assert_is_on_curve(self) {\n        let t0 = self.x * self.x;\n        let t1 = self.y * self.y;\n        std::as_witness(t0);\n        std::as_witness(t1);\n        let t2 = Params::a() * t0 + t1;\n        let t3 = 1 + Params::d() * t0 * t1;\n        assert(t2 == t3);\n    }\n\n    /// Constrain two points to equal each other\n    ///\n    /// Cheaper than `assert(self == other)` because no need to return a bool\n    ///\n    /// Cost: 0-2 gates (can do these asserts with just copy constraints)\n    fn assert_equal(self, other: Self) {\n        assert(self.x == other.x);\n        assert(self.y == other.y);\n    }\n\n    /// Return a bool that describes whether the point is on the curve\n    ///\n    /// If you don't need to handle the failure case, it is cheaper to call `assert_is_on_curve`\n    ///\n    /// Cost: 5 gates\n    fn is_on_curve(self) -> bool {\n        let t0 = self.x * self.x;\n        let t1 = self.y * self.y;\n        std::as_witness(t0);\n        std::as_witness(t1);\n        let t2 = Params::a() * t0 + t1;\n        let t3 = 1 + Params::d() * t0 * t1;\n        (t2 == t3)\n    }\n\n    /// Compute `self + self`\n    ///\n    /// Cost: 5 gates\n    fn dbl(self) -> Self {\n        Curve::dbl_internal(self, Params::a(), Params::d())\n    }\n\n    /// Compute `self * scalar`\n    ///\n    /// Uses the Straus method via lookup tables.\n    /// Assumes backend has an efficient implementation of a memory table abstraction\n    /// i.e. `let x = table[y]` is efficient even if `y` is not known at compile time\n    ///\n    /// Key cost components are as follows:\n    ///      1: computing the Straus point lookup table (169 gates)\n    ///      2: 252 point doublings (1260 gates)\n    ///      3: 63 point additions (441 gates)\n    ///      4: 126 table reads with runtime index (252 gates)\n    ///\n    /// Cost: 2122 gates + cost of creating ScalarField (110 gates)\n    ///\n    /// TODO: use windowed non-adjacent form to remove 7 point additions when creating lookup table\n    fn mul<let NScalarSlices: u32>(self: Self, scalar: ScalarField<NScalarSlices>) -> Self {\n        // define a, d params locally to make code more readable (shouldn't affect performance)\n        let a = Params::a();\n        let d = Params::d();\n\n        // Construct tables of precomputed point coordinates.\n        let (table_x, table_y): ([Field; 16], [Field; 16]) = self.compute_straus_point_table(a, d);\n\n        // Initialize the accumulator with the point that maps to the first (most significant) scalar slice\n        let idx = scalar.base4_slices[0];\n        let mut accumulator: Self = Curve { x: table_x[idx], y: table_y[idx] };\n\n        // Execute a double-and-add subroutine\n        // 1. Compute `accumulator = accumulator * 16`\n        // 2. Extract 4-bits from the scalar multiplier and\n        //    use them to retrieve the corresponding point from our point table\n        // Note: this is similar to the \"double and add\" scalar multiplication method, except we use base16 instead of base2!\n        for i in 1..NScalarSlices {\n            accumulator = accumulator.dbl_internal(a, d);\n            accumulator = accumulator.dbl_internal(a, d);\n            accumulator = accumulator.dbl_internal(a, d);\n            accumulator = accumulator.dbl_internal(a, d);\n            let idx: u8 = scalar.base4_slices[i];\n            let x = table_x[idx];\n            let y = table_y[idx];\n            accumulator = accumulator.add_internal(Curve { x, y }, a, d);\n        }\n\n        // todo fix\n        if (scalar.skew) {\n            accumulator = accumulator - self;\n        }\n        accumulator\n    }\n\n    /// compute `points[0] * scalar[0] + ... + points[N-1] * scalar[N-1]`\n    ///\n    /// Is cheaper than `mul` when processing >1 point due to reduced number of point doublings\n    /// uses the Straus MSM method via lookup tables.\n    /// Assumes backend has an efficient implementation of a memory table abstraction\n    /// i.e. `let x = table[y]` is efficient even if `y` is not known at compile time\n    ///\n    /// Key cost components are as follows\n    /// PER POINT costs:\n    ///      1: computing the Straus point lookup table (169N gates)\n    ///      2: 63 point additions (441N gates)\n    ///      3: 126 table reads with runtime index (252N gates)\n    ///\n    /// Additional costs:\n    ///      1. 252 point doublings 1260 gates\n    ///\n    /// Cost: 1260 + 862N + cost of creating ScalarField (110N gates)\n    ///\n    /// TODO: use windowed non-adjacent form to remove 7 point additions per point when creating lookup table\n    fn msm<let N: u32, let NScalarSlices: u32>(\n        points: [Self; N],\n        scalars: [ScalarField<NScalarSlices>; N],\n    ) -> Self {\n        let a = Params::a();\n        let d = Params::d();\n\n        // Generalized version of `mul` for multiple points.\n        let mut point_tables: [([Field; 16], [Field; 16]); N] = [([0; 16], [0; 16]); N];\n        for j in 0..N {\n            point_tables[j] = points[j].compute_straus_point_table(a, d);\n        }\n\n        let idx = scalars[0].base4_slices[0];\n        let mut accumulator: Self = Curve { x: point_tables[0].0[idx], y: point_tables[0].1[idx] };\n        for j in 1..N {\n            let idx = scalars[j].base4_slices[0];\n            let P = Curve { x: point_tables[j].0[idx], y: point_tables[j].1[idx] };\n            accumulator = accumulator.add_internal(P, a, d);\n        }\n        for i in 1..NScalarSlices {\n            accumulator = accumulator.dbl_internal(a, d);\n            accumulator = accumulator.dbl_internal(a, d);\n            accumulator = accumulator.dbl_internal(a, d);\n            accumulator = accumulator.dbl_internal(a, d);\n            for j in 0..N {\n                let idx: u8 = scalars[j].base4_slices[i];\n                let x = point_tables[j].0[idx];\n                let y = point_tables[j].1[idx];\n                accumulator = accumulator.add_internal(Curve { x, y }, a, d);\n            }\n        }\n\n        for j in 0..N {\n            if (scalars[j].skew == true) {\n                accumulator = accumulator - points[j];\n            }\n        }\n        accumulator\n    }\n}\n\n// ####################################################################################################################\n// ####################################################################################################################\n// ### H E L P E R    F U N C T I O N S\n// ####################################################################################################################\n// ####################################################################################################################\nimpl<Params> Curve<Params> {\n\n    /// add two points together\n    ///\n    /// This method exists because of a Noir bug where `Params` cannot be accessed by an internal function\n    /// called from internal function. e.g. compiler error if `mul` impl tries to call `add` :(\n    fn add_internal(self, other: Self, a: Field, d: Field) -> Self {\n        let x1 = self.x;\n        let x2 = other.x;\n        let y1 = self.y;\n        let y2 = other.y;\n        let (x, y, lambda) = unsafe { __add_unconstrained(x1, x2, y1, y2, a, d) };\n        let x1x2 = x1 * x2;\n        let x1y2 = x1 * y2;\n        std::as_witness(x1x2);\n        std::as_witness(x1y2);\n        let x_lhs = x * lambda * d + x - x1y2; // equals y1x2\n        let y_lhs = y * lambda * -d + y + x1x2 * a; // equals y1y2\n        let y1x2 = y1 * x2;\n        let y1y2 = y1 * y2;\n        std::as_witness(y1x2);\n        std::as_witness(y1y2);\n        let y1y2x1x2 = y1y2 * x1x2;\n        assert(x_lhs == y1x2);\n        assert(y_lhs == y1y2);\n        assert(y1y2x1x2 == lambda);\n        Self { x, y }\n    }\n\n    /// add a point to itself\n    ///\n    /// This method exists because of a Noir bug where `Params` cannot be accessed by an internal function\n    /// called from internal function. e.g. compiler error if `mul` impl tries to call `dbl` :(\n    fn dbl_internal(self, a: Field, d: Field) -> Self {\n        let x1 = self.x;\n        let y1 = self.y;\n        let (x3, y3, _) = unsafe { __add_unconstrained(x1, x1, y1, y1, a, d) };\n        let x1x1a = x1 * x1 * a;\n        std::as_witness(x1x1a);\n        // t1 = a*x_1^2 + y_1^2\n        let t1 = y1 * y1 + x1x1a;\n        std::as_witness(t1);\n        // t3 = y_3 * (2 - a*x_1^2 + y_1^2) + 2*a*x_1^2\n        let t3 = y3 + y3 - t1 * y3 + x1x1a * 2;\n        // t3 == t1 implies y_3 * (2 - a*x_1^2 - y_1^2) + 2*a*x_1^2 == a*x_1^2 + y_1^2\n        // i.e. y_3 = y_1^2 - a*x_1^2 / (2 - a*x_1^2 - y_1^2)\n        assert(t3 == t1);\n        let t4 = x1 * y1;\n        std::as_witness(t4);\n        // x3 * t1 - t4 == t4 implies x_3 * (y_1^2 + a * x_1^2) = 2 * x_1 * y_1\n        // i.e. x_3 = 2 * x_1 * y_1 / (y_1^2 + a * x_1^2)\n        let t2 = x3 * t1 - t4;\n        assert(t2 == t4);\n        Self { x: x3, y: y3 }\n    }\n\n    /// Compute a 4-bit lookup table of point multiples for the Straus windowed scalar multiplication algorithm.\n    ///\n    /// Table contains [0, P, 2P, ..., 15P], which is used in the scalar mul algorithm to minimize the total number of required point additions\n    ///\n    /// It is cheaper to use ([Field; 16], [Field; 16]) than it is ([Curve; 16]).\n    /// This is because the compiler will represent [Curve; 16] in 1 ROM array (vs 2 for [Field; 16], [Field; 16]).\n    /// This means that any index into the ROM array for [Curve; 16] requires an additional arithmetic gate to process.\n    ///\n    ///      For example consider `let P: Curve = table[idx]`\n    ///      `table` will be a ROM array with 32 elements in it.\n    ///      The x-coordinates will be located at `2 * idx`\n    ///      The y-coordinates will be located at `2 * idx + 1`\n    ///      If `idx` is not known at compile time (for Straus it isnt), 2 arithmetic gates are required to evaluate `2 * idx`, `2 * idx + 1`\n    ///      before they can be used as arguments in a memory lookup protocol\n    ///\n    ///      Now consider `let P_x = table_x[idx]; let P_y = table_y[idx]`\n    ///      In this example, `idx` can be directly used as the argument into a memory lookup protocol for both tables.\n    ///\n    ///      For the Barretenberg backend, the cost of a Read-Only memory lookup is 2 gates,\n    ///      so splitting the x/y coordinates into separate tables means that the cost to lookup a point is 4 gates\n    ///      2 extra arithmetic gates would increase the cost by 50%, which we avoid by returning `([Field; 16], [Field; 16])` instead of `([Curve; 16])`\n    ///\n    /// Key cost components are as follows:\n    ///      1: Defining two size-16 lookup tables (2 gates per element, 32 elements = 64 gates)\n    ///      2: 15 point additions (7 * 5 = 105)\n    ///\n    /// Total Cost: 169 gates\n    ///\n    /// TODO: use windowed non-adjacent form to remove 8 point additions\n    fn compute_straus_point_table(self, a: Field, d: Field) -> ([Field; 16], [Field; 16]) {\n        let mut table_x: [Field; 16] = [0; 16];\n        let mut table_y: [Field; 16] = [0; 16];\n        table_x[8] = self.x;\n        table_y[8] = self.y;\n        let D = self.dbl_internal(a, d);\n        for i in 1..8 {\n            let Q = Self { x: table_x[7 + i], y: table_y[7 + i] };\n            let V = D.add_internal(Q, a, d);\n            table_x[8 + i] = V.x;\n            table_y[8 + i] = V.y;\n        }\n        for i in 0..8 {\n            table_x[i] = -table_x[15 - i];\n            table_y[i] = table_y[15 - i];\n        }\n        (table_x, table_y)\n    }\n}\n\n/// add points together, return output + lambda ter\nunconstrained fn __add_unconstrained(\n    x1: Field,\n    x2: Field,\n    y1: Field,\n    y2: Field,\n    a: Field,\n    d: Field,\n) -> (Field, Field, Field) {\n    let lambda = y1 * y2 * x1 * x2;\n    let y = (x1 * x2 * a - y1 * y2) / (lambda * d - 1);\n    let x = (x1 * y2 + y1 * x2) / (lambda * d + 1);\n    (x, y, lambda)\n}\n",
      "path": "/Users/elena/nargo/github.com/noir-lang/noir-edwards/v0.1.1/src/lib.nr"
    },
    "66": {
      "source": "/// ScalarField represents a scalar multiplier as a sequence of 4-bit slices\n///\n/// There is nuance to ScalarField, because twisted edwards curves generally have prime group orders that easily fit into a Field\n/// We can therefore obtain cheap conversions by simply summing up the bit slices and validate they equal the input scalar\n/// However...when converting arbitrary field elements (i.e. scalars that are multiples of a TE curve group order),\n/// we must perform additional checks when converting into 4-bit slices, as we must validate that the sum of the slices is smaller than the Field modulus (when evaluated over the integers)\n/// This is expensive and we would rather not do it! therefore ScalarField<N> is flexible.\n/// ScalarField<63> enables cheap bitslice converions for scalar multipliers that must be <2^{252}\n/// ScalarField<64> enables bitslice conversions for arbitrary field elements\n///\n/// N.B. ScalarField bit values are not constrained to be smaller than the TE curve group order.\n/// ScalarField is used when performing scalar multiplications, where all operations wrap modulo the curve order\npub struct ScalarField<let N: u32> {\n    pub(crate) base4_slices: [u8; N],\n    pub(crate) skew: bool,\n}\n\nunconstrained fn get_wnaf_slices<let N: u32>(x: Field) -> ([u8; N], bool) {\n    let mut result: [u8; N] = [0; N];\n    let mut nibbles: [u8; N] = x.to_le_radix(16);\n\n    let skew: bool = nibbles[0] & 1 == 0;\n    nibbles[0] += skew as u8;\n    result[N - 1] = (nibbles[0] + 15) / 2;\n    for i in 1..N {\n        let mut nibble: u8 = nibbles[i];\n        result[N - 1 - i] = (nibble + 15) / 2;\n        if (nibble & 1 == 0) {\n            result[N - 1 - i] += 1;\n            result[N - i] -= 8;\n        }\n    }\n    (result, skew)\n}\n\nunconstrained fn from_wnaf_slices(x: [u8; 64], skew: bool) -> Field {\n    let mut result: Field = 0;\n\n    for i in 0..64 {\n        result *= 16;\n        result += (x[i] as Field) * 2 - 15;\n    }\n    result -= skew as Field;\n    result\n}\n\n#[test]\nfn test_wnaf() {\n    unsafe {\n        let result: Field = 0x123456789abcdef0123456789abcdef0123456789abcdef0123456789abcdef0;\n        let (t0, t1) = get_wnaf_slices(result);\n        let expected = from_wnaf_slices(t0, t1);\n        assert(result == expected);\n    }\n}\n\ncomptime fn get_modulus_slices() -> (Field, Field) {\n    let bytes = std::field::modulus_be_bytes();\n    let num_bytes = std::field::modulus_num_bits() / 8;\n    let mut lo: Field = 0;\n    let mut hi: Field = 0;\n    for i in 0..(num_bytes / 2) {\n        hi *= 256;\n        hi += bytes[i] as Field;\n        lo *= 256;\n        lo += bytes[i + (num_bytes / 2)] as Field;\n    }\n    if (num_bytes & 1 == 1) {\n        lo *= 256;\n        lo += bytes[num_bytes - 1] as Field;\n    }\n    (lo, hi)\n}\n\nunconstrained fn get_borrow_flag(lhs_lo: Field, rhs_lo: Field) -> bool {\n    lhs_lo.lt(rhs_lo + 1)\n}\nimpl<let N: u32> std::convert::From<Field> for ScalarField<N> {\n\n    /// Construct from a field element\n    ///\n    /// if N >= 64 we perform extra checks to ensure the slice decomposition represents the same integral value as the input\n    /// (e.g. sum of slices != x + modulus)\n    fn from(x: Field) -> Self {\n        let mut result: Self = ScalarField { base4_slices: [0; N], skew: false };\n        let (slices, skew): ([u8; N], bool) = unsafe { get_wnaf_slices(x) };\n        result.base4_slices = slices;\n        result.skew = skew;\n        if (N < 64) {\n            let mut acc: Field = (slices[0] as Field) * 2 - 15;\n            for i in 1..N {\n                acc *= 16;\n                acc += (slices[i] as Field) * 2 - 15;\n            }\n            assert(acc - skew as Field == x);\n        } else {\n            // TODO: if num bits = 64, validate in sum of the bits is smaller than the Field modulus\n            let mut lo: Field = slices[(N / 2)] as Field;\n            let mut hi: Field = slices[0] as Field;\n            let mut borrow_shift = 1;\n            for i in 1..(N / 2) {\n                borrow_shift *= 16;\n                lo *= 16;\n                lo += (slices[(N / 2) + i] as Field) * 2 - 15;\n                hi *= 16;\n                hi += (slices[i] as Field) * 2 - 15;\n            }\n            if ((N & 1) == 1) {\n                borrow_shift *= 16;\n                lo *= 16;\n                lo += (slices[N - 1] as Field) * 2 - 15;\n            }\n            lo -= skew as Field;\n            // Validate that the integer represented by (lo, hi) is smaller than the integer represented by (plo, phi)\n            let (plo, phi) = comptime { get_modulus_slices() };\n            unsafe {\n                // Safety: `borrow`'s value is constrained to be correct by below range constraints.\n                let borrow = get_borrow_flag(plo, lo) as Field;\n\n                let rlo = plo - lo + borrow * borrow_shift - 1; // -1 because we are checking a strict <, not <=\n                let rhi = phi - hi - borrow;\n                rlo.assert_max_bit_size::<(N / 2 + N % 2) * 4>();\n                rhi.assert_max_bit_size::<N / 2 * 4>();\n            }\n        }\n        for i in 0..N {\n            (result.base4_slices[i] as Field).assert_max_bit_size::<4>();\n        }\n        result\n    }\n}\n\nimpl<let N: u32> std::convert::Into<Field> for ScalarField<N> {\n\n    /// Construct from tuple of field elements\n    ///\n    /// Use this method instead of `new` if you know x/y is on the curve\n    fn into(self: Self) -> Field {\n        let mut acc: Field = 0;\n        for i in 0..N {\n            acc = acc * 16;\n            acc = acc + (self.base4_slices[i] as Field) * 2 - 15;\n        }\n        acc -= self.skew as Field;\n        acc\n    }\n}\n\nimpl<let N: u32> ScalarField<N> {\n\n    pub fn new() -> Self {\n        Self { base4_slices: [0; N], skew: false }\n    }\n    fn get(self, idx: u64) -> u8 {\n        self.base4_slices[idx]\n    }\n}\n",
      "path": "/Users/elena/nargo/github.com/noir-lang/noir-edwards/v0.1.1/src/scalar_field.nr"
    }
  },
  "names": ["main"],
  "brillig_names": [
    "decompose_hint",
    "lte_hint",
    "get_wnaf_slices",
    "__add_unconstrained",
    "directive_integer_quotient"
  ]
}
