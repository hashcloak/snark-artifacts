{
  "noir_version": "1.0.0-beta.3+ceaa1986628197bd1170147f6a07f0f98d21030a",
  "hash": 10821117268598498290,
  "abi": {
    "parameters": [
      {
        "name": "bp",
        "type": {
          "kind": "array",
          "length": 2,
          "type": {
            "kind": "struct",
            "path": "BatchProof",
            "fields": [
              { "name": "verification_key", "type": { "kind": "array", "length": 128, "type": { "kind": "field" } } },
              { "name": "proof", "type": { "kind": "array", "length": 456, "type": { "kind": "field" } } },
              { "name": "key_hash", "type": { "kind": "field" } },
              { "name": "public_inputs_hash", "type": { "kind": "field" } }
            ]
          }
        },
        "visibility": "private"
      }
    ],
    "return_type": { "abi_type": { "kind": "field" }, "visibility": "public" },
    "error_types": {}
  },
  "bytecode": "",
  "debug_symbols": "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",
  "file_map": {
    "18": {
      "source": "pub mod bn254;\nuse crate::{runtime::is_unconstrained, static_assert};\nuse bn254::lt as bn254_lt;\n\nimpl Field {\n    /// Asserts that `self` can be represented in `bit_size` bits.\n    ///\n    /// # Failures\n    /// Causes a constraint failure for `Field` values exceeding `2^{bit_size}`.\n    // docs:start:assert_max_bit_size\n    pub fn assert_max_bit_size<let BIT_SIZE: u32>(self) {\n        // docs:end:assert_max_bit_size\n        static_assert(\n            BIT_SIZE < modulus_num_bits() as u32,\n            \"BIT_SIZE must be less than modulus_num_bits\",\n        );\n        self.__assert_max_bit_size(BIT_SIZE);\n    }\n\n    #[builtin(apply_range_constraint)]\n    fn __assert_max_bit_size(self, bit_size: u32) {}\n\n    /// Decomposes `self` into its little endian bit decomposition as a `[u1; N]` array.\n    /// This slice will be zero padded should not all bits be necessary to represent `self`.\n    ///\n    /// # Failures\n    /// Causes a constraint failure for `Field` values exceeding `2^N` as the resulting slice will not\n    /// be able to represent the original `Field`.\n    ///\n    /// # Safety\n    /// Values of `N` equal to or greater than the number of bits necessary to represent the `Field` modulus\n    /// (e.g. 254 for the BN254 field) allow for multiple bit decompositions. This is due to how the `Field` will\n    /// wrap around due to overflow when verifying the decomposition.\n    #[builtin(to_le_bits)]\n    fn _to_le_bits<let N: u32>(self: Self) -> [u1; N] {}\n\n    /// Decomposes `self` into its big endian bit decomposition as a `[u1; N]` array.\n    /// This array will be zero padded should not all bits be necessary to represent `self`.\n    ///\n    /// # Failures\n    /// Causes a constraint failure for `Field` values exceeding `2^N` as the resulting slice will not\n    /// be able to represent the original `Field`.\n    ///\n    /// # Safety\n    /// Values of `N` equal to or greater than the number of bits necessary to represent the `Field` modulus\n    /// (e.g. 254 for the BN254 field) allow for multiple bit decompositions. This is due to how the `Field` will\n    /// wrap around due to overflow when verifying the decomposition.\n    #[builtin(to_be_bits)]\n    fn _to_be_bits<let N: u32>(self: Self) -> [u1; N] {}\n\n    /// Decomposes `self` into its little endian bit decomposition as a `[u1; N]` array.\n    /// This slice will be zero padded should not all bits be necessary to represent `self`.\n    ///\n    /// # Failures\n    /// Causes a constraint failure for `Field` values exceeding `2^N` as the resulting slice will not\n    /// be able to represent the original `Field`.\n    ///\n    /// # Safety\n    /// The bit decomposition returned is canonical and is guaranteed to not overflow the modulus.\n    // docs:start:to_le_bits\n    pub fn to_le_bits<let N: u32>(self: Self) -> [u1; N] {\n        // docs:end:to_le_bits\n        let bits = self._to_le_bits();\n\n        if !is_unconstrained() {\n            // Ensure that the byte decomposition does not overflow the modulus\n            let p = modulus_le_bits();\n            assert(bits.len() <= p.len());\n            let mut ok = bits.len() != p.len();\n            for i in 0..N {\n                if !ok {\n                    if (bits[N - 1 - i] != p[N - 1 - i]) {\n                        assert(p[N - 1 - i] == 1);\n                        ok = true;\n                    }\n                }\n            }\n            assert(ok);\n        }\n        bits\n    }\n\n    /// Decomposes `self` into its big endian bit decomposition as a `[u1; N]` array.\n    /// This array will be zero padded should not all bits be necessary to represent `self`.\n    ///\n    /// # Failures\n    /// Causes a constraint failure for `Field` values exceeding `2^N` as the resulting slice will not\n    /// be able to represent the original `Field`.\n    ///\n    /// # Safety\n    /// The bit decomposition returned is canonical and is guaranteed to not overflow the modulus.\n    // docs:start:to_be_bits\n    pub fn to_be_bits<let N: u32>(self: Self) -> [u1; N] {\n        // docs:end:to_be_bits\n        let bits = self._to_be_bits();\n\n        if !is_unconstrained() {\n            // Ensure that the decomposition does not overflow the modulus\n            let p = modulus_be_bits();\n            assert(bits.len() <= p.len());\n            let mut ok = bits.len() != p.len();\n            for i in 0..N {\n                if !ok {\n                    if (bits[i] != p[i]) {\n                        assert(p[i] == 1);\n                        ok = true;\n                    }\n                }\n            }\n            assert(ok);\n        }\n        bits\n    }\n\n    /// Decomposes `self` into its little endian byte decomposition as a `[u8;N]` array\n    /// This array will be zero padded should not all bytes be necessary to represent `self`.\n    ///\n    /// # Failures\n    ///  The length N of the array must be big enough to contain all the bytes of the 'self',\n    ///  and no more than the number of bytes required to represent the field modulus\n    ///\n    /// # Safety\n    /// The result is ensured to be the canonical decomposition of the field element\n    // docs:start:to_le_bytes\n    pub fn to_le_bytes<let N: u32>(self: Self) -> [u8; N] {\n        // docs:end:to_le_bytes\n        static_assert(\n            N <= modulus_le_bytes().len(),\n            \"N must be less than or equal to modulus_le_bytes().len()\",\n        );\n        // Compute the byte decomposition\n        let bytes = self.to_le_radix(256);\n\n        if !is_unconstrained() {\n            // Ensure that the byte decomposition does not overflow the modulus\n            let p = modulus_le_bytes();\n            assert(bytes.len() <= p.len());\n            let mut ok = bytes.len() != p.len();\n            for i in 0..N {\n                if !ok {\n                    if (bytes[N - 1 - i] != p[N - 1 - i]) {\n                        assert(bytes[N - 1 - i] < p[N - 1 - i]);\n                        ok = true;\n                    }\n                }\n            }\n            assert(ok);\n        }\n        bytes\n    }\n\n    /// Decomposes `self` into its big endian byte decomposition as a `[u8;N]` array of length required to represent the field modulus\n    /// This array will be zero padded should not all bytes be necessary to represent `self`.\n    ///\n    /// # Failures\n    ///  The length N of the array must be big enough to contain all the bytes of the 'self',\n    ///  and no more than the number of bytes required to represent the field modulus\n    ///\n    /// # Safety\n    /// The result is ensured to be the canonical decomposition of the field element\n    // docs:start:to_be_bytes\n    pub fn to_be_bytes<let N: u32>(self: Self) -> [u8; N] {\n        // docs:end:to_be_bytes\n        static_assert(\n            N <= modulus_le_bytes().len(),\n            \"N must be less than or equal to modulus_le_bytes().len()\",\n        );\n        // Compute the byte decomposition\n        let bytes = self.to_be_radix(256);\n\n        if !is_unconstrained() {\n            // Ensure that the byte decomposition does not overflow the modulus\n            let p = modulus_be_bytes();\n            assert(bytes.len() <= p.len());\n            let mut ok = bytes.len() != p.len();\n            for i in 0..N {\n                if !ok {\n                    if (bytes[i] != p[i]) {\n                        assert(bytes[i] < p[i]);\n                        ok = true;\n                    }\n                }\n            }\n            assert(ok);\n        }\n        bytes\n    }\n\n    // docs:start:to_le_radix\n    pub fn to_le_radix<let N: u32>(self: Self, radix: u32) -> [u8; N] {\n        // Brillig does not need an immediate radix\n        if !crate::runtime::is_unconstrained() {\n            static_assert(1 < radix, \"radix must be greater than 1\");\n            static_assert(radix <= 256, \"radix must be less than or equal to 256\");\n            static_assert(radix & (radix - 1) == 0, \"radix must be a power of 2\");\n        }\n        self.__to_le_radix(radix)\n    }\n    // docs:end:to_le_radix\n\n    // docs:start:to_be_radix\n    pub fn to_be_radix<let N: u32>(self: Self, radix: u32) -> [u8; N] {\n        // Brillig does not need an immediate radix\n        if !crate::runtime::is_unconstrained() {\n            crate::assert_constant(radix);\n        }\n        self.__to_be_radix(radix)\n    }\n    // docs:end:to_be_radix\n\n    // `_radix` must be less than 256\n    #[builtin(to_le_radix)]\n    fn __to_le_radix<let N: u32>(self, radix: u32) -> [u8; N] {}\n\n    // `_radix` must be less than 256\n    #[builtin(to_be_radix)]\n    fn __to_be_radix<let N: u32>(self, radix: u32) -> [u8; N] {}\n\n    // Returns self to the power of the given exponent value.\n    // Caution: we assume the exponent fits into 32 bits\n    // using a bigger bit size impacts negatively the performance and should be done only if the exponent does not fit in 32 bits\n    pub fn pow_32(self, exponent: Field) -> Field {\n        let mut r: Field = 1;\n        let b: [u1; 32] = exponent.to_le_bits();\n\n        for i in 1..33 {\n            r *= r;\n            r = (b[32 - i] as Field) * (r * self) + (1 - b[32 - i] as Field) * r;\n        }\n        r\n    }\n\n    // Parity of (prime) Field element, i.e. sgn0(x mod p) = 0 if x `elem` {0, ..., p-1} is even, otherwise sgn0(x mod p) = 1.\n    pub fn sgn0(self) -> u1 {\n        self as u1\n    }\n\n    pub fn lt(self, another: Field) -> bool {\n        if crate::compat::is_bn254() {\n            bn254_lt(self, another)\n        } else {\n            lt_fallback(self, another)\n        }\n    }\n\n    /// Convert a little endian byte array to a field element.\n    /// If the provided byte array overflows the field modulus then the Field will silently wrap around.\n    pub fn from_le_bytes<let N: u32>(bytes: [u8; N]) -> Field {\n        static_assert(\n            N <= modulus_le_bytes().len(),\n            \"N must be less than or equal to modulus_le_bytes().len()\",\n        );\n        let mut v = 1;\n        let mut result = 0;\n\n        for i in 0..N {\n            result += (bytes[i] as Field) * v;\n            v = v * 256;\n        }\n        result\n    }\n\n    /// Convert a big endian byte array to a field element.\n    /// If the provided byte array overflows the field modulus then the Field will silently wrap around.\n    pub fn from_be_bytes<let N: u32>(bytes: [u8; N]) -> Field {\n        let mut v = 1;\n        let mut result = 0;\n\n        for i in 0..N {\n            result += (bytes[N - 1 - i] as Field) * v;\n            v = v * 256;\n        }\n        result\n    }\n}\n\n#[builtin(modulus_num_bits)]\npub comptime fn modulus_num_bits() -> u64 {}\n\n#[builtin(modulus_be_bits)]\npub comptime fn modulus_be_bits() -> [u1] {}\n\n#[builtin(modulus_le_bits)]\npub comptime fn modulus_le_bits() -> [u1] {}\n\n#[builtin(modulus_be_bytes)]\npub comptime fn modulus_be_bytes() -> [u8] {}\n\n#[builtin(modulus_le_bytes)]\npub comptime fn modulus_le_bytes() -> [u8] {}\n\n/// An unconstrained only built in to efficiently compare fields.\n#[builtin(field_less_than)]\nunconstrained fn __field_less_than(x: Field, y: Field) -> bool {}\n\npub(crate) unconstrained fn field_less_than(x: Field, y: Field) -> bool {\n    __field_less_than(x, y)\n}\n\n// Convert a 32 byte array to a field element by modding\npub fn bytes32_to_field(bytes32: [u8; 32]) -> Field {\n    // Convert it to a field element\n    let mut v = 1;\n    let mut high = 0 as Field;\n    let mut low = 0 as Field;\n\n    for i in 0..16 {\n        high = high + (bytes32[15 - i] as Field) * v;\n        low = low + (bytes32[16 + 15 - i] as Field) * v;\n        v = v * 256;\n    }\n    // Abuse that a % p + b % p = (a + b) % p and that low < p\n    low + high * v\n}\n\nfn lt_fallback(x: Field, y: Field) -> bool {\n    if is_unconstrained() {\n        // Safety: unconstrained context\n        unsafe {\n            field_less_than(x, y)\n        }\n    } else {\n        let x_bytes: [u8; 32] = x.to_le_bytes();\n        let y_bytes: [u8; 32] = y.to_le_bytes();\n        let mut x_is_lt = false;\n        let mut done = false;\n        for i in 0..32 {\n            if (!done) {\n                let x_byte = x_bytes[32 - 1 - i] as u8;\n                let y_byte = y_bytes[32 - 1 - i] as u8;\n                let bytes_match = x_byte == y_byte;\n                if !bytes_match {\n                    x_is_lt = x_byte < y_byte;\n                    done = true;\n                }\n            }\n        }\n        x_is_lt\n    }\n}\n\nmod tests {\n    use crate::{panic::panic, runtime};\n    use super::field_less_than;\n\n    #[test]\n    // docs:start:to_be_bits_example\n    fn test_to_be_bits() {\n        let field = 2;\n        let bits: [u1; 8] = field.to_be_bits();\n        assert_eq(bits, [0, 0, 0, 0, 0, 0, 1, 0]);\n    }\n    // docs:end:to_be_bits_example\n\n    #[test]\n    // docs:start:to_le_bits_example\n    fn test_to_le_bits() {\n        let field = 2;\n        let bits: [u1; 8] = field.to_le_bits();\n        assert_eq(bits, [0, 1, 0, 0, 0, 0, 0, 0]);\n    }\n    // docs:end:to_le_bits_example\n\n    #[test]\n    // docs:start:to_be_bytes_example\n    fn test_to_be_bytes() {\n        let field = 2;\n        let bytes: [u8; 8] = field.to_be_bytes();\n        assert_eq(bytes, [0, 0, 0, 0, 0, 0, 0, 2]);\n        assert_eq(Field::from_be_bytes::<8>(bytes), field);\n    }\n    // docs:end:to_be_bytes_example\n\n    #[test]\n    // docs:start:to_le_bytes_example\n    fn test_to_le_bytes() {\n        let field = 2;\n        let bytes: [u8; 8] = field.to_le_bytes();\n        assert_eq(bytes, [2, 0, 0, 0, 0, 0, 0, 0]);\n        assert_eq(Field::from_le_bytes::<8>(bytes), field);\n    }\n    // docs:end:to_le_bytes_example\n\n    #[test]\n    // docs:start:to_be_radix_example\n    fn test_to_be_radix() {\n        // 259, in base 256, big endian, is [1, 3].\n        // i.e. 3 * 256^0 + 1 * 256^1\n        let field = 259;\n\n        // The radix (in this example, 256) must be a power of 2.\n        // The length of the returned byte array can be specified to be\n        // >= the amount of space needed.\n        let bytes: [u8; 8] = field.to_be_radix(256);\n        assert_eq(bytes, [0, 0, 0, 0, 0, 0, 1, 3]);\n        assert_eq(Field::from_be_bytes::<8>(bytes), field);\n    }\n    // docs:end:to_be_radix_example\n\n    #[test]\n    // docs:start:to_le_radix_example\n    fn test_to_le_radix() {\n        // 259, in base 256, little endian, is [3, 1].\n        // i.e. 3 * 256^0 + 1 * 256^1\n        let field = 259;\n\n        // The radix (in this example, 256) must be a power of 2.\n        // The length of the returned byte array can be specified to be\n        // >= the amount of space needed.\n        let bytes: [u8; 8] = field.to_le_radix(256);\n        assert_eq(bytes, [3, 1, 0, 0, 0, 0, 0, 0]);\n        assert_eq(Field::from_le_bytes::<8>(bytes), field);\n    }\n    // docs:end:to_le_radix_example\n\n    #[test(should_fail_with = \"radix must be greater than 1\")]\n    fn test_to_le_radix_1() {\n        // this test should only fail in constrained mode\n        if !runtime::is_unconstrained() {\n            let field = 2;\n            let _: [u8; 8] = field.to_le_radix(1);\n        } else {\n            panic(f\"radix must be greater than 1\");\n        }\n    }\n\n    // TODO: Update this test to account for the Brillig restriction that the radix must be greater than 2\n    //#[test]\n    //fn test_to_le_radix_brillig_1() {\n    //    // this test should only fail in constrained mode\n    //    if runtime::is_unconstrained() {\n    //        let field = 1;\n    //        let out: [u8; 8] = field.to_le_radix(1);\n    //        crate::println(out);\n    //        let expected = [0; 8];\n    //        assert(out == expected, \"unexpected result\");\n    //    }\n    //}\n\n    #[test(should_fail_with = \"radix must be a power of 2\")]\n    fn test_to_le_radix_3() {\n        // this test should only fail in constrained mode\n        if !runtime::is_unconstrained() {\n            let field = 2;\n            let _: [u8; 8] = field.to_le_radix(3);\n        } else {\n            panic(f\"radix must be a power of 2\");\n        }\n    }\n\n    #[test]\n    fn test_to_le_radix_brillig_3() {\n        // this test should only fail in constrained mode\n        if runtime::is_unconstrained() {\n            let field = 1;\n            let out: [u8; 8] = field.to_le_radix(3);\n            let mut expected = [0; 8];\n            expected[0] = 1;\n            assert(out == expected, \"unexpected result\");\n        }\n    }\n\n    #[test(should_fail_with = \"radix must be less than or equal to 256\")]\n    fn test_to_le_radix_512() {\n        // this test should only fail in constrained mode\n        if !runtime::is_unconstrained() {\n            let field = 2;\n            let _: [u8; 8] = field.to_le_radix(512);\n        } else {\n            panic(f\"radix must be less than or equal to 256\")\n        }\n    }\n\n    // TODO: Update this test to account for the Brillig restriction that the radix must be less than 512\n    //#[test]\n    //fn test_to_le_radix_brillig_512() {\n    //    // this test should only fail in constrained mode\n    //    if runtime::is_unconstrained() {\n    //        let field = 1;\n    //        let out: [u8; 8] = field.to_le_radix(512);\n    //        let mut expected = [0; 8];\n    //        expected[0] = 1;\n    //        assert(out == expected, \"unexpected result\");\n    //    }\n    //}\n\n    #[test]\n    unconstrained fn test_field_less_than() {\n        assert(field_less_than(0, 1));\n        assert(field_less_than(0, 0x100));\n        assert(field_less_than(0x100, 0 - 1));\n        assert(!field_less_than(0 - 1, 0));\n    }\n}\n",
      "path": "std/field/mod.nr"
    },
    "29": {
      "source": "pub mod hash;\npub mod aes128;\npub mod array;\npub mod slice;\npub mod merkle;\npub mod ecdsa_secp256k1;\npub mod ecdsa_secp256r1;\npub mod embedded_curve_ops;\npub mod sha256;\npub mod sha512;\npub mod field;\npub mod collections;\npub mod compat;\npub mod convert;\npub mod option;\npub mod string;\npub mod test;\npub mod cmp;\npub mod ops;\npub mod default;\npub mod prelude;\npub mod uint128;\npub mod runtime;\npub mod meta;\npub mod append;\npub mod mem;\npub mod panic;\npub mod hint;\n\nuse convert::AsPrimitive;\n\n// Oracle calls are required to be wrapped in an unconstrained function\n// Thus, the only argument to the `println` oracle is expected to always be an ident\n#[oracle(print)]\nunconstrained fn print_oracle<T>(with_newline: bool, input: T) {}\n\nunconstrained fn print_unconstrained<T>(with_newline: bool, input: T) {\n    print_oracle(with_newline, input);\n}\n\npub fn println<T>(input: T) {\n    // Safety: a print statement cannot be constrained\n    unsafe {\n        print_unconstrained(true, input);\n    }\n}\n\npub fn print<T>(input: T) {\n    // Safety: a print statement cannot be constrained\n    unsafe {\n        print_unconstrained(false, input);\n    }\n}\n\npub fn verify_proof<let N: u32, let M: u32, let K: u32>(\n    verification_key: [Field; N],\n    proof: [Field; M],\n    public_inputs: [Field; K],\n    key_hash: Field,\n) {\n    verify_proof_internal(verification_key, proof, public_inputs, key_hash, 0);\n}\n\npub fn verify_proof_with_type<let N: u32, let M: u32, let K: u32>(\n    verification_key: [Field; N],\n    proof: [Field; M],\n    public_inputs: [Field; K],\n    key_hash: Field,\n    proof_type: u32,\n) {\n    if !crate::runtime::is_unconstrained() {\n        crate::assert_constant(proof_type);\n    }\n    verify_proof_internal(verification_key, proof, public_inputs, key_hash, proof_type);\n}\n\n#[foreign(recursive_aggregation)]\nfn verify_proof_internal<let N: u32, let M: u32, let K: u32>(\n    verification_key: [Field; N],\n    proof: [Field; M],\n    public_inputs: [Field; K],\n    key_hash: Field,\n    proof_type: u32,\n) {}\n\n// Asserts that the given value is known at compile-time.\n// Useful for debugging for-loop bounds.\n#[builtin(assert_constant)]\npub fn assert_constant<T>(x: T) {}\n\n// Asserts that the given value is both true and known at compile-time\n#[builtin(static_assert)]\npub fn static_assert<let N: u32>(predicate: bool, message: str<N>) {}\n\npub fn wrapping_add<T>(x: T, y: T) -> T\nwhere\n    T: AsPrimitive<Field>,\n    Field: AsPrimitive<T>,\n{\n    AsPrimitive::as_(x.as_() + y.as_())\n}\n\npub fn wrapping_sub<T>(x: T, y: T) -> T\nwhere\n    T: AsPrimitive<Field>,\n    Field: AsPrimitive<T>,\n{\n    //340282366920938463463374607431768211456 is 2^128, it is used to avoid underflow\n    AsPrimitive::as_(x.as_() + 340282366920938463463374607431768211456 - y.as_())\n}\n\npub fn wrapping_mul<T>(x: T, y: T) -> T\nwhere\n    T: AsPrimitive<Field>,\n    Field: AsPrimitive<T>,\n{\n    AsPrimitive::as_(x.as_() * y.as_())\n}\n\n#[builtin(as_witness)]\npub fn as_witness(x: Field) {}\n\nmod tests {\n    #[test(should_fail_with = \"custom message\")]\n    fn test_static_assert_custom_message() {\n        super::static_assert(1 == 2, \"custom message\");\n    }\n}\n",
      "path": "std/lib.nr"
    },
    "61": {
      "source": "use dep::std::verify_proof;\n\n// A proof produced by a previous batch circuit\nstruct BatchProof {\n    verification_key: [Field; 128],\n    proof: [Field; 456],\n    key_hash: Field, // Apparently this is 0x00 for now, but we still make it dynamic\n    public_inputs_hash: Field,\n}\n\n// Batch 2 Batch proofs into a single proof\n// Note: the inputs *cannot* be raw Semaphore proofs.\nfn main(bp: [BatchProof; 2]) -> pub Field {\n    // Note that actual verification happens when this proof gets verified\n    verify_proof(\n        bp[0].verification_key,\n        bp[0].proof,\n        [bp[0].public_inputs_hash],\n        bp[0].key_hash,\n    );\n    verify_proof(\n        bp[1].verification_key,\n        bp[1].proof,\n        [bp[1].public_inputs_hash],\n        bp[1].key_hash,\n    );\n\n    // Hash hashes of public_inputs together\n    let mut public_input_bytes = [0 as u8; 64];\n    for i in 0..32 {\n        // bp[0].public_inputs_hash\n        public_input_bytes[i] = bp[0].public_inputs_hash.to_be_bytes::<32>()[i];\n        // bp[1].public_inputs_hash\n        public_input_bytes[i + 32] = bp[1].public_inputs_hash.to_be_bytes::<32>()[i];\n    }\n\n    Field::from_be_bytes(keccak256::keccak256(public_input_bytes, 64))\n}\n",
      "path": "/Users/elena/Documents/hashcloak/clients/Aztec/semaphore_grant_related/semaphore-noir/packages/noir-proof-batch/circuits/batch_2_nodes_new/src/main.nr"
    },
    "63": {
      "source": "mod tests;\n\nuse std::runtime::is_unconstrained;\nuse std::hash::keccak::keccakf1600;\n\nglobal BLOCK_SIZE_IN_BYTES: u32 = 136; //(1600 - BITS * 2) / WORD_SIZE;\nglobal WORD_SIZE: u32 = 8; // Limbs are made up of u64s so 8 bytes each.\nglobal LIMBS_PER_BLOCK: u32 = BLOCK_SIZE_IN_BYTES / WORD_SIZE;\nglobal NUM_KECCAK_LANES: u32 = 25;\n\n#[no_predicates]\npub fn keccak256<let N: u32>(input: [u8; N], message_size: u32) -> [u8; 32] {\n    assert(N >= message_size);\n\n    // Copy input to block bytes. For that we'll need at least input bytes (N)\n    // but we want it to be padded to a multiple of BLOCK_SIZE_IN_BYTES.\n    let mut block_bytes = [0; ((N / BLOCK_SIZE_IN_BYTES) + 1) * BLOCK_SIZE_IN_BYTES];\n    if is_unconstrained() {\n        for i in 0..message_size {\n            block_bytes[i] = input[i];\n        }\n    } else {\n        for i in 0..N {\n            if i < message_size {\n                block_bytes[i] = input[i];\n            }\n        }\n    }\n\n    //1. format_input_lanes\n    let max_blocks = (N + BLOCK_SIZE_IN_BYTES) / BLOCK_SIZE_IN_BYTES;\n    //maximum number of bytes to hash\n    let real_max_blocks = (message_size + BLOCK_SIZE_IN_BYTES) / BLOCK_SIZE_IN_BYTES;\n    let real_blocks_bytes = real_max_blocks * BLOCK_SIZE_IN_BYTES;\n\n    block_bytes[message_size] = 1;\n    block_bytes[real_blocks_bytes - 1] = 0x80;\n\n    // populate a vector of 64-bit limbs from our byte array\n    let mut sliced_buffer =\n        [0; (((N / BLOCK_SIZE_IN_BYTES) + 1) * BLOCK_SIZE_IN_BYTES) / WORD_SIZE];\n    for i in 0..sliced_buffer.len() {\n        let limb_start = WORD_SIZE * i;\n\n        let mut sliced = 0;\n        let mut v = 1;\n        for k in 0..WORD_SIZE {\n            sliced += v * (block_bytes[limb_start + k] as Field);\n            v *= 256;\n        }\n\n        sliced_buffer[i] = sliced as u64;\n    }\n\n    //2. sponge_absorb\n    let mut state: [u64; NUM_KECCAK_LANES] = [0; NUM_KECCAK_LANES];\n    // When in an unconstrained runtime we can take advantage of runtime loop bounds,\n    // thus allowing us to simplify the loop body.\n    if is_unconstrained() {\n        for i in 0..real_max_blocks {\n            if (i == 0) {\n                for j in 0..LIMBS_PER_BLOCK {\n                    state[j] = sliced_buffer[j];\n                }\n            } else {\n                for j in 0..LIMBS_PER_BLOCK {\n                    state[j] = state[j] ^ sliced_buffer[i * LIMBS_PER_BLOCK + j];\n                }\n            }\n            state = keccakf1600(state);\n        }\n    } else {\n        // `real_max_blocks` is guaranteed to at least be `1`\n        // We peel out the first block as to avoid a conditional inside of the loop.\n        // Otherwise, a dynamic predicate can cause a blowup in a constrained runtime.\n        for j in 0..LIMBS_PER_BLOCK {\n            state[j] = sliced_buffer[j];\n        }\n        state = keccakf1600(state);\n        for i in 1..max_blocks {\n            if i < real_max_blocks {\n                for j in 0..LIMBS_PER_BLOCK {\n                    state[j] = state[j] ^ sliced_buffer[i * LIMBS_PER_BLOCK + j];\n                }\n                state = keccakf1600(state);\n            }\n        }\n    }\n\n    //3. sponge_squeeze\n    let mut result = [0; 32];\n    for i in 0..4 {\n        let lane = state[i] as Field;\n        let lane_le: [u8; 8] = lane.to_le_bytes();\n        for j in 0..8 {\n            result[8 * i + j] = lane_le[j];\n        }\n    }\n    result\n}\n",
      "path": "/Users/elena/nargo/github.com/noir-lang/keccak256/v0.1.0/src/keccak256.nr"
    }
  },
  "names": ["main"],
  "brillig_names": ["directive_to_radix", "directive_invert", "directive_integer_quotient"]
}
