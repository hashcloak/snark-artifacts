{
  "noir_version": "1.0.0-beta.3+ceaa1986628197bd1170147f6a07f0f98d21030a",
  "hash": 6799237333442222514,
  "abi": {
    "parameters": [
      { "name": "secret_key", "type": { "kind": "field" }, "visibility": "private" },
      {
        "name": "index_bits",
        "type": { "kind": "array", "length": 4, "type": { "kind": "integer", "sign": "unsigned", "width": 1 } },
        "visibility": "private"
      },
      {
        "name": "hash_path",
        "type": { "kind": "array", "length": 4, "type": { "kind": "field" } },
        "visibility": "private"
      },
      {
        "name": "merkle_proof_length",
        "type": { "kind": "integer", "sign": "unsigned", "width": 32 },
        "visibility": "private"
      },
      { "name": "hashed_scope", "type": { "kind": "field" }, "visibility": "public" },
      { "name": "hashed_message", "type": { "kind": "field" }, "visibility": "public" }
    ],
    "return_type": {
      "abi_type": { "kind": "tuple", "fields": [{ "kind": "field" }, { "kind": "field" }] },
      "visibility": "public"
    },
    "error_types": {
      "2920182694213909827": { "error_kind": "string", "string": "attempt to subtract with overflow" },
      "5019202896831570965": { "error_kind": "string", "string": "attempt to add with overflow" },
      "6485997221020871071": { "error_kind": "string", "string": "call to assert_max_bit_size" },
      "16761564377371454734": { "error_kind": "string", "string": "Array index out of bounds" },
      "17843811134343075018": { "error_kind": "string", "string": "Stack too deep" }
    }
  },
  "bytecode": "",
  "debug_symbols": "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",
  "file_map": {
    "17": {
      "source": "use crate::field::field_less_than;\nuse crate::runtime::is_unconstrained;\n\n// The low and high decomposition of the field modulus\nglobal PLO: Field = 53438638232309528389504892708671455233;\nglobal PHI: Field = 64323764613183177041862057485226039389;\n\npub(crate) global TWO_POW_128: Field = 0x100000000000000000000000000000000;\nglobal TWO_POW_64: Field = 0x10000000000000000;\n\n// Decomposes a single field into two 16 byte fields.\nfn compute_decomposition(mut x: Field) -> (Field, Field) {\n    // Here's we're taking advantage of truncating 64 bit limbs from the input field\n    // and then subtracting them from the input such the field division is equivalent to integer division.\n    let low_lower_64 = (x as u64) as Field;\n    x = (x - low_lower_64) / TWO_POW_64;\n    let low_upper_64 = (x as u64) as Field;\n\n    let high = (x - low_upper_64) / TWO_POW_64;\n    let low = low_upper_64 * TWO_POW_64 + low_lower_64;\n\n    (low, high)\n}\n\npub(crate) unconstrained fn decompose_hint(x: Field) -> (Field, Field) {\n    compute_decomposition(x)\n}\n\nunconstrained fn lte_hint(x: Field, y: Field) -> bool {\n    if x == y {\n        true\n    } else {\n        field_less_than(x, y)\n    }\n}\n\n// Assert that (alo > blo && ahi >= bhi) || (alo <= blo && ahi > bhi)\nfn assert_gt_limbs(a: (Field, Field), b: (Field, Field)) {\n    let (alo, ahi) = a;\n    let (blo, bhi) = b;\n    // Safety: borrow is enforced to be boolean due to its type.\n    // if borrow is 0, it asserts that (alo > blo && ahi >= bhi)\n    // if borrow is 1, it asserts that (alo <= blo && ahi > bhi)\n    unsafe {\n        let borrow = lte_hint(alo, blo);\n\n        let rlo = alo - blo - 1 + (borrow as Field) * TWO_POW_128;\n        let rhi = ahi - bhi - (borrow as Field);\n\n        rlo.assert_max_bit_size::<128>();\n        rhi.assert_max_bit_size::<128>();\n    }\n}\n\n/// Decompose a single field into two 16 byte fields.\npub fn decompose(x: Field) -> (Field, Field) {\n    if is_unconstrained() {\n        compute_decomposition(x)\n    } else {\n        // Safety: decomposition is properly checked below\n        unsafe {\n            // Take hints of the decomposition\n            let (xlo, xhi) = decompose_hint(x);\n\n            // Range check the limbs\n            xlo.assert_max_bit_size::<128>();\n            xhi.assert_max_bit_size::<128>();\n\n            // Check that the decomposition is correct\n            assert_eq(x, xlo + TWO_POW_128 * xhi);\n\n            // Assert that the decomposition of P is greater than the decomposition of x\n            assert_gt_limbs((PLO, PHI), (xlo, xhi));\n            (xlo, xhi)\n        }\n    }\n}\n\npub fn assert_gt(a: Field, b: Field) {\n    if is_unconstrained() {\n        assert(\n            // Safety: already unconstrained\n            unsafe { field_less_than(b, a) },\n        );\n    } else {\n        // Decompose a and b\n        let a_limbs = decompose(a);\n        let b_limbs = decompose(b);\n\n        // Assert that a_limbs is greater than b_limbs\n        assert_gt_limbs(a_limbs, b_limbs)\n    }\n}\n\npub fn assert_lt(a: Field, b: Field) {\n    assert_gt(b, a);\n}\n\npub fn gt(a: Field, b: Field) -> bool {\n    if is_unconstrained() {\n        // Safety: unsafe in unconstrained\n        unsafe {\n            field_less_than(b, a)\n        }\n    } else if a == b {\n        false\n    } else {\n        // Safety: Take a hint of the comparison and verify it\n        unsafe {\n            if field_less_than(a, b) {\n                assert_gt(b, a);\n                false\n            } else {\n                assert_gt(a, b);\n                true\n            }\n        }\n    }\n}\n\npub fn lt(a: Field, b: Field) -> bool {\n    gt(b, a)\n}\n\nmod tests {\n    // TODO: Allow imports from \"super\"\n    use crate::field::bn254::{assert_gt, decompose, gt, lte_hint, PHI, PLO, TWO_POW_128};\n\n    #[test]\n    fn check_decompose() {\n        assert_eq(decompose(TWO_POW_128), (0, 1));\n        assert_eq(decompose(TWO_POW_128 + 0x1234567890), (0x1234567890, 1));\n        assert_eq(decompose(0x1234567890), (0x1234567890, 0));\n    }\n\n    #[test]\n    unconstrained fn check_decompose_unconstrained() {\n        assert_eq(decompose(TWO_POW_128), (0, 1));\n        assert_eq(decompose(TWO_POW_128 + 0x1234567890), (0x1234567890, 1));\n        assert_eq(decompose(0x1234567890), (0x1234567890, 0));\n    }\n\n    #[test]\n    unconstrained fn check_lte_hint() {\n        assert(lte_hint(0, 1));\n        assert(lte_hint(0, 0x100));\n        assert(lte_hint(0x100, TWO_POW_128 - 1));\n        assert(!lte_hint(0 - 1, 0));\n\n        assert(lte_hint(0, 0));\n        assert(lte_hint(0x100, 0x100));\n        assert(lte_hint(0 - 1, 0 - 1));\n    }\n\n    #[test]\n    fn check_assert_gt() {\n        assert_gt(1, 0);\n        assert_gt(0x100, 0);\n        assert_gt((0 - 1), (0 - 2));\n        assert_gt(TWO_POW_128, 0);\n        assert_gt(0 - 1, 0);\n    }\n\n    #[test]\n    unconstrained fn check_assert_gt_unconstrained() {\n        assert_gt(1, 0);\n        assert_gt(0x100, 0);\n        assert_gt((0 - 1), (0 - 2));\n        assert_gt(TWO_POW_128, 0);\n        assert_gt(0 - 1, 0);\n    }\n\n    #[test]\n    fn check_gt() {\n        assert(gt(1, 0));\n        assert(gt(0x100, 0));\n        assert(gt((0 - 1), (0 - 2)));\n        assert(gt(TWO_POW_128, 0));\n        assert(!gt(0, 0));\n        assert(!gt(0, 0x100));\n        assert(gt(0 - 1, 0 - 2));\n        assert(!gt(0 - 2, 0 - 1));\n    }\n\n    #[test]\n    unconstrained fn check_gt_unconstrained() {\n        assert(gt(1, 0));\n        assert(gt(0x100, 0));\n        assert(gt((0 - 1), (0 - 2)));\n        assert(gt(TWO_POW_128, 0));\n        assert(!gt(0, 0));\n        assert(!gt(0, 0x100));\n        assert(gt(0 - 1, 0 - 2));\n        assert(!gt(0 - 2, 0 - 1));\n    }\n\n    #[test]\n    fn check_plo_phi() {\n        assert_eq(PLO + PHI * TWO_POW_128, 0);\n        let p_bytes = crate::field::modulus_le_bytes();\n        let mut p_low: Field = 0;\n        let mut p_high: Field = 0;\n\n        let mut offset = 1;\n        for i in 0..16 {\n            p_low += (p_bytes[i] as Field) * offset;\n            p_high += (p_bytes[i + 16] as Field) * offset;\n            offset *= 256;\n        }\n        assert_eq(p_low, PLO);\n        assert_eq(p_high, PHI);\n    }\n}\n",
      "path": "std/field/bn254.nr"
    },
    "18": {
      "source": "pub mod bn254;\nuse crate::{runtime::is_unconstrained, static_assert};\nuse bn254::lt as bn254_lt;\n\nimpl Field {\n    /// Asserts that `self` can be represented in `bit_size` bits.\n    ///\n    /// # Failures\n    /// Causes a constraint failure for `Field` values exceeding `2^{bit_size}`.\n    // docs:start:assert_max_bit_size\n    pub fn assert_max_bit_size<let BIT_SIZE: u32>(self) {\n        // docs:end:assert_max_bit_size\n        static_assert(\n            BIT_SIZE < modulus_num_bits() as u32,\n            \"BIT_SIZE must be less than modulus_num_bits\",\n        );\n        self.__assert_max_bit_size(BIT_SIZE);\n    }\n\n    #[builtin(apply_range_constraint)]\n    fn __assert_max_bit_size(self, bit_size: u32) {}\n\n    /// Decomposes `self` into its little endian bit decomposition as a `[u1; N]` array.\n    /// This slice will be zero padded should not all bits be necessary to represent `self`.\n    ///\n    /// # Failures\n    /// Causes a constraint failure for `Field` values exceeding `2^N` as the resulting slice will not\n    /// be able to represent the original `Field`.\n    ///\n    /// # Safety\n    /// Values of `N` equal to or greater than the number of bits necessary to represent the `Field` modulus\n    /// (e.g. 254 for the BN254 field) allow for multiple bit decompositions. This is due to how the `Field` will\n    /// wrap around due to overflow when verifying the decomposition.\n    #[builtin(to_le_bits)]\n    fn _to_le_bits<let N: u32>(self: Self) -> [u1; N] {}\n\n    /// Decomposes `self` into its big endian bit decomposition as a `[u1; N]` array.\n    /// This array will be zero padded should not all bits be necessary to represent `self`.\n    ///\n    /// # Failures\n    /// Causes a constraint failure for `Field` values exceeding `2^N` as the resulting slice will not\n    /// be able to represent the original `Field`.\n    ///\n    /// # Safety\n    /// Values of `N` equal to or greater than the number of bits necessary to represent the `Field` modulus\n    /// (e.g. 254 for the BN254 field) allow for multiple bit decompositions. This is due to how the `Field` will\n    /// wrap around due to overflow when verifying the decomposition.\n    #[builtin(to_be_bits)]\n    fn _to_be_bits<let N: u32>(self: Self) -> [u1; N] {}\n\n    /// Decomposes `self` into its little endian bit decomposition as a `[u1; N]` array.\n    /// This slice will be zero padded should not all bits be necessary to represent `self`.\n    ///\n    /// # Failures\n    /// Causes a constraint failure for `Field` values exceeding `2^N` as the resulting slice will not\n    /// be able to represent the original `Field`.\n    ///\n    /// # Safety\n    /// The bit decomposition returned is canonical and is guaranteed to not overflow the modulus.\n    // docs:start:to_le_bits\n    pub fn to_le_bits<let N: u32>(self: Self) -> [u1; N] {\n        // docs:end:to_le_bits\n        let bits = self._to_le_bits();\n\n        if !is_unconstrained() {\n            // Ensure that the byte decomposition does not overflow the modulus\n            let p = modulus_le_bits();\n            assert(bits.len() <= p.len());\n            let mut ok = bits.len() != p.len();\n            for i in 0..N {\n                if !ok {\n                    if (bits[N - 1 - i] != p[N - 1 - i]) {\n                        assert(p[N - 1 - i] == 1);\n                        ok = true;\n                    }\n                }\n            }\n            assert(ok);\n        }\n        bits\n    }\n\n    /// Decomposes `self` into its big endian bit decomposition as a `[u1; N]` array.\n    /// This array will be zero padded should not all bits be necessary to represent `self`.\n    ///\n    /// # Failures\n    /// Causes a constraint failure for `Field` values exceeding `2^N` as the resulting slice will not\n    /// be able to represent the original `Field`.\n    ///\n    /// # Safety\n    /// The bit decomposition returned is canonical and is guaranteed to not overflow the modulus.\n    // docs:start:to_be_bits\n    pub fn to_be_bits<let N: u32>(self: Self) -> [u1; N] {\n        // docs:end:to_be_bits\n        let bits = self._to_be_bits();\n\n        if !is_unconstrained() {\n            // Ensure that the decomposition does not overflow the modulus\n            let p = modulus_be_bits();\n            assert(bits.len() <= p.len());\n            let mut ok = bits.len() != p.len();\n            for i in 0..N {\n                if !ok {\n                    if (bits[i] != p[i]) {\n                        assert(p[i] == 1);\n                        ok = true;\n                    }\n                }\n            }\n            assert(ok);\n        }\n        bits\n    }\n\n    /// Decomposes `self` into its little endian byte decomposition as a `[u8;N]` array\n    /// This array will be zero padded should not all bytes be necessary to represent `self`.\n    ///\n    /// # Failures\n    ///  The length N of the array must be big enough to contain all the bytes of the 'self',\n    ///  and no more than the number of bytes required to represent the field modulus\n    ///\n    /// # Safety\n    /// The result is ensured to be the canonical decomposition of the field element\n    // docs:start:to_le_bytes\n    pub fn to_le_bytes<let N: u32>(self: Self) -> [u8; N] {\n        // docs:end:to_le_bytes\n        static_assert(\n            N <= modulus_le_bytes().len(),\n            \"N must be less than or equal to modulus_le_bytes().len()\",\n        );\n        // Compute the byte decomposition\n        let bytes = self.to_le_radix(256);\n\n        if !is_unconstrained() {\n            // Ensure that the byte decomposition does not overflow the modulus\n            let p = modulus_le_bytes();\n            assert(bytes.len() <= p.len());\n            let mut ok = bytes.len() != p.len();\n            for i in 0..N {\n                if !ok {\n                    if (bytes[N - 1 - i] != p[N - 1 - i]) {\n                        assert(bytes[N - 1 - i] < p[N - 1 - i]);\n                        ok = true;\n                    }\n                }\n            }\n            assert(ok);\n        }\n        bytes\n    }\n\n    /// Decomposes `self` into its big endian byte decomposition as a `[u8;N]` array of length required to represent the field modulus\n    /// This array will be zero padded should not all bytes be necessary to represent `self`.\n    ///\n    /// # Failures\n    ///  The length N of the array must be big enough to contain all the bytes of the 'self',\n    ///  and no more than the number of bytes required to represent the field modulus\n    ///\n    /// # Safety\n    /// The result is ensured to be the canonical decomposition of the field element\n    // docs:start:to_be_bytes\n    pub fn to_be_bytes<let N: u32>(self: Self) -> [u8; N] {\n        // docs:end:to_be_bytes\n        static_assert(\n            N <= modulus_le_bytes().len(),\n            \"N must be less than or equal to modulus_le_bytes().len()\",\n        );\n        // Compute the byte decomposition\n        let bytes = self.to_be_radix(256);\n\n        if !is_unconstrained() {\n            // Ensure that the byte decomposition does not overflow the modulus\n            let p = modulus_be_bytes();\n            assert(bytes.len() <= p.len());\n            let mut ok = bytes.len() != p.len();\n            for i in 0..N {\n                if !ok {\n                    if (bytes[i] != p[i]) {\n                        assert(bytes[i] < p[i]);\n                        ok = true;\n                    }\n                }\n            }\n            assert(ok);\n        }\n        bytes\n    }\n\n    // docs:start:to_le_radix\n    pub fn to_le_radix<let N: u32>(self: Self, radix: u32) -> [u8; N] {\n        // Brillig does not need an immediate radix\n        if !crate::runtime::is_unconstrained() {\n            static_assert(1 < radix, \"radix must be greater than 1\");\n            static_assert(radix <= 256, \"radix must be less than or equal to 256\");\n            static_assert(radix & (radix - 1) == 0, \"radix must be a power of 2\");\n        }\n        self.__to_le_radix(radix)\n    }\n    // docs:end:to_le_radix\n\n    // docs:start:to_be_radix\n    pub fn to_be_radix<let N: u32>(self: Self, radix: u32) -> [u8; N] {\n        // Brillig does not need an immediate radix\n        if !crate::runtime::is_unconstrained() {\n            crate::assert_constant(radix);\n        }\n        self.__to_be_radix(radix)\n    }\n    // docs:end:to_be_radix\n\n    // `_radix` must be less than 256\n    #[builtin(to_le_radix)]\n    fn __to_le_radix<let N: u32>(self, radix: u32) -> [u8; N] {}\n\n    // `_radix` must be less than 256\n    #[builtin(to_be_radix)]\n    fn __to_be_radix<let N: u32>(self, radix: u32) -> [u8; N] {}\n\n    // Returns self to the power of the given exponent value.\n    // Caution: we assume the exponent fits into 32 bits\n    // using a bigger bit size impacts negatively the performance and should be done only if the exponent does not fit in 32 bits\n    pub fn pow_32(self, exponent: Field) -> Field {\n        let mut r: Field = 1;\n        let b: [u1; 32] = exponent.to_le_bits();\n\n        for i in 1..33 {\n            r *= r;\n            r = (b[32 - i] as Field) * (r * self) + (1 - b[32 - i] as Field) * r;\n        }\n        r\n    }\n\n    // Parity of (prime) Field element, i.e. sgn0(x mod p) = 0 if x `elem` {0, ..., p-1} is even, otherwise sgn0(x mod p) = 1.\n    pub fn sgn0(self) -> u1 {\n        self as u1\n    }\n\n    pub fn lt(self, another: Field) -> bool {\n        if crate::compat::is_bn254() {\n            bn254_lt(self, another)\n        } else {\n            lt_fallback(self, another)\n        }\n    }\n\n    /// Convert a little endian byte array to a field element.\n    /// If the provided byte array overflows the field modulus then the Field will silently wrap around.\n    pub fn from_le_bytes<let N: u32>(bytes: [u8; N]) -> Field {\n        static_assert(\n            N <= modulus_le_bytes().len(),\n            \"N must be less than or equal to modulus_le_bytes().len()\",\n        );\n        let mut v = 1;\n        let mut result = 0;\n\n        for i in 0..N {\n            result += (bytes[i] as Field) * v;\n            v = v * 256;\n        }\n        result\n    }\n\n    /// Convert a big endian byte array to a field element.\n    /// If the provided byte array overflows the field modulus then the Field will silently wrap around.\n    pub fn from_be_bytes<let N: u32>(bytes: [u8; N]) -> Field {\n        let mut v = 1;\n        let mut result = 0;\n\n        for i in 0..N {\n            result += (bytes[N - 1 - i] as Field) * v;\n            v = v * 256;\n        }\n        result\n    }\n}\n\n#[builtin(modulus_num_bits)]\npub comptime fn modulus_num_bits() -> u64 {}\n\n#[builtin(modulus_be_bits)]\npub comptime fn modulus_be_bits() -> [u1] {}\n\n#[builtin(modulus_le_bits)]\npub comptime fn modulus_le_bits() -> [u1] {}\n\n#[builtin(modulus_be_bytes)]\npub comptime fn modulus_be_bytes() -> [u8] {}\n\n#[builtin(modulus_le_bytes)]\npub comptime fn modulus_le_bytes() -> [u8] {}\n\n/// An unconstrained only built in to efficiently compare fields.\n#[builtin(field_less_than)]\nunconstrained fn __field_less_than(x: Field, y: Field) -> bool {}\n\npub(crate) unconstrained fn field_less_than(x: Field, y: Field) -> bool {\n    __field_less_than(x, y)\n}\n\n// Convert a 32 byte array to a field element by modding\npub fn bytes32_to_field(bytes32: [u8; 32]) -> Field {\n    // Convert it to a field element\n    let mut v = 1;\n    let mut high = 0 as Field;\n    let mut low = 0 as Field;\n\n    for i in 0..16 {\n        high = high + (bytes32[15 - i] as Field) * v;\n        low = low + (bytes32[16 + 15 - i] as Field) * v;\n        v = v * 256;\n    }\n    // Abuse that a % p + b % p = (a + b) % p and that low < p\n    low + high * v\n}\n\nfn lt_fallback(x: Field, y: Field) -> bool {\n    if is_unconstrained() {\n        // Safety: unconstrained context\n        unsafe {\n            field_less_than(x, y)\n        }\n    } else {\n        let x_bytes: [u8; 32] = x.to_le_bytes();\n        let y_bytes: [u8; 32] = y.to_le_bytes();\n        let mut x_is_lt = false;\n        let mut done = false;\n        for i in 0..32 {\n            if (!done) {\n                let x_byte = x_bytes[32 - 1 - i] as u8;\n                let y_byte = y_bytes[32 - 1 - i] as u8;\n                let bytes_match = x_byte == y_byte;\n                if !bytes_match {\n                    x_is_lt = x_byte < y_byte;\n                    done = true;\n                }\n            }\n        }\n        x_is_lt\n    }\n}\n\nmod tests {\n    use crate::{panic::panic, runtime};\n    use super::field_less_than;\n\n    #[test]\n    // docs:start:to_be_bits_example\n    fn test_to_be_bits() {\n        let field = 2;\n        let bits: [u1; 8] = field.to_be_bits();\n        assert_eq(bits, [0, 0, 0, 0, 0, 0, 1, 0]);\n    }\n    // docs:end:to_be_bits_example\n\n    #[test]\n    // docs:start:to_le_bits_example\n    fn test_to_le_bits() {\n        let field = 2;\n        let bits: [u1; 8] = field.to_le_bits();\n        assert_eq(bits, [0, 1, 0, 0, 0, 0, 0, 0]);\n    }\n    // docs:end:to_le_bits_example\n\n    #[test]\n    // docs:start:to_be_bytes_example\n    fn test_to_be_bytes() {\n        let field = 2;\n        let bytes: [u8; 8] = field.to_be_bytes();\n        assert_eq(bytes, [0, 0, 0, 0, 0, 0, 0, 2]);\n        assert_eq(Field::from_be_bytes::<8>(bytes), field);\n    }\n    // docs:end:to_be_bytes_example\n\n    #[test]\n    // docs:start:to_le_bytes_example\n    fn test_to_le_bytes() {\n        let field = 2;\n        let bytes: [u8; 8] = field.to_le_bytes();\n        assert_eq(bytes, [2, 0, 0, 0, 0, 0, 0, 0]);\n        assert_eq(Field::from_le_bytes::<8>(bytes), field);\n    }\n    // docs:end:to_le_bytes_example\n\n    #[test]\n    // docs:start:to_be_radix_example\n    fn test_to_be_radix() {\n        // 259, in base 256, big endian, is [1, 3].\n        // i.e. 3 * 256^0 + 1 * 256^1\n        let field = 259;\n\n        // The radix (in this example, 256) must be a power of 2.\n        // The length of the returned byte array can be specified to be\n        // >= the amount of space needed.\n        let bytes: [u8; 8] = field.to_be_radix(256);\n        assert_eq(bytes, [0, 0, 0, 0, 0, 0, 1, 3]);\n        assert_eq(Field::from_be_bytes::<8>(bytes), field);\n    }\n    // docs:end:to_be_radix_example\n\n    #[test]\n    // docs:start:to_le_radix_example\n    fn test_to_le_radix() {\n        // 259, in base 256, little endian, is [3, 1].\n        // i.e. 3 * 256^0 + 1 * 256^1\n        let field = 259;\n\n        // The radix (in this example, 256) must be a power of 2.\n        // The length of the returned byte array can be specified to be\n        // >= the amount of space needed.\n        let bytes: [u8; 8] = field.to_le_radix(256);\n        assert_eq(bytes, [3, 1, 0, 0, 0, 0, 0, 0]);\n        assert_eq(Field::from_le_bytes::<8>(bytes), field);\n    }\n    // docs:end:to_le_radix_example\n\n    #[test(should_fail_with = \"radix must be greater than 1\")]\n    fn test_to_le_radix_1() {\n        // this test should only fail in constrained mode\n        if !runtime::is_unconstrained() {\n            let field = 2;\n            let _: [u8; 8] = field.to_le_radix(1);\n        } else {\n            panic(f\"radix must be greater than 1\");\n        }\n    }\n\n    // TODO: Update this test to account for the Brillig restriction that the radix must be greater than 2\n    //#[test]\n    //fn test_to_le_radix_brillig_1() {\n    //    // this test should only fail in constrained mode\n    //    if runtime::is_unconstrained() {\n    //        let field = 1;\n    //        let out: [u8; 8] = field.to_le_radix(1);\n    //        crate::println(out);\n    //        let expected = [0; 8];\n    //        assert(out == expected, \"unexpected result\");\n    //    }\n    //}\n\n    #[test(should_fail_with = \"radix must be a power of 2\")]\n    fn test_to_le_radix_3() {\n        // this test should only fail in constrained mode\n        if !runtime::is_unconstrained() {\n            let field = 2;\n            let _: [u8; 8] = field.to_le_radix(3);\n        } else {\n            panic(f\"radix must be a power of 2\");\n        }\n    }\n\n    #[test]\n    fn test_to_le_radix_brillig_3() {\n        // this test should only fail in constrained mode\n        if runtime::is_unconstrained() {\n            let field = 1;\n            let out: [u8; 8] = field.to_le_radix(3);\n            let mut expected = [0; 8];\n            expected[0] = 1;\n            assert(out == expected, \"unexpected result\");\n        }\n    }\n\n    #[test(should_fail_with = \"radix must be less than or equal to 256\")]\n    fn test_to_le_radix_512() {\n        // this test should only fail in constrained mode\n        if !runtime::is_unconstrained() {\n            let field = 2;\n            let _: [u8; 8] = field.to_le_radix(512);\n        } else {\n            panic(f\"radix must be less than or equal to 256\")\n        }\n    }\n\n    // TODO: Update this test to account for the Brillig restriction that the radix must be less than 512\n    //#[test]\n    //fn test_to_le_radix_brillig_512() {\n    //    // this test should only fail in constrained mode\n    //    if runtime::is_unconstrained() {\n    //        let field = 1;\n    //        let out: [u8; 8] = field.to_le_radix(512);\n    //        let mut expected = [0; 8];\n    //        expected[0] = 1;\n    //        assert(out == expected, \"unexpected result\");\n    //    }\n    //}\n\n    #[test]\n    unconstrained fn test_field_less_than() {\n        assert(field_less_than(0, 1));\n        assert(field_less_than(0, 0x100));\n        assert(field_less_than(0x100, 0 - 1));\n        assert(!field_less_than(0 - 1, 0));\n    }\n}\n",
      "path": "std/field/mod.nr"
    },
    "22": {
      "source": "// Instantiations of Poseidon permutation for the prime field of the same order as BN254\nuse crate::hash::poseidon::bn254::consts;\nuse crate::hash::poseidon::permute;\n\n#[field(bn254)]\npub fn x5_2(mut state: [Field; 2]) -> [Field; 2] {\n    state = permute(consts::x5_2_config(), state);\n\n    state\n}\n\n#[field(bn254)]\npub fn x5_3(mut state: [Field; 3]) -> [Field; 3] {\n    state = permute(consts::x5_3_config(), state);\n\n    state\n}\n\n#[field(bn254)]\npub fn x5_4(mut state: [Field; 4]) -> [Field; 4] {\n    state = permute(consts::x5_4_config(), state);\n\n    state\n}\n\n#[field(bn254)]\npub fn x5_5(mut state: [Field; 5]) -> [Field; 5] {\n    state = permute(consts::x5_5_config(), state);\n\n    state\n}\n\n#[field(bn254)]\npub fn x5_6(mut state: [Field; 6]) -> [Field; 6] {\n    state = permute(consts::x5_6_config(), state);\n\n    state\n}\n\n#[field(bn254)]\npub fn x5_7(mut state: [Field; 7]) -> [Field; 7] {\n    state = permute(consts::x5_7_config(), state);\n\n    state\n}\n\n#[field(bn254)]\npub fn x5_8(mut state: [Field; 8]) -> [Field; 8] {\n    state = permute(consts::x5_8_config(), state);\n\n    state\n}\n\n#[field(bn254)]\npub fn x5_9(mut state: [Field; 9]) -> [Field; 9] {\n    state = permute(consts::x5_9_config(), state);\n\n    state\n}\n\n#[field(bn254)]\npub fn x5_10(mut state: [Field; 10]) -> [Field; 10] {\n    state = permute(consts::x5_10_config(), state);\n\n    state\n}\n\n#[field(bn254)]\npub fn x5_11(mut state: [Field; 11]) -> [Field; 11] {\n    state = permute(consts::x5_11_config(), state);\n\n    state\n}\n\n#[field(bn254)]\npub fn x5_12(mut state: [Field; 12]) -> [Field; 12] {\n    state = permute(consts::x5_12_config(), state);\n\n    state\n}\n\n#[field(bn254)]\npub fn x5_13(mut state: [Field; 13]) -> [Field; 13] {\n    state = permute(consts::x5_13_config(), state);\n\n    state\n}\n\n#[field(bn254)]\npub fn x5_14(mut state: [Field; 14]) -> [Field; 14] {\n    state = permute(consts::x5_14_config(), state);\n\n    state\n}\n\n#[field(bn254)]\npub fn x5_15(mut state: [Field; 15]) -> [Field; 15] {\n    state = permute(consts::x5_15_config(), state);\n\n    state\n}\n\n#[field(bn254)]\npub fn x5_16(mut state: [Field; 16]) -> [Field; 16] {\n    state = permute(consts::x5_16_config(), state);\n\n    state\n}\n\n#[field(bn254)]\npub fn x5_17(mut state: [Field; 17]) -> [Field; 17] {\n    state = permute(consts::x5_17_config(), state);\n\n    state\n}\n",
      "path": "std/hash/poseidon/bn254/perm.nr"
    },
    "23": {
      "source": "// Instantiations of Poseidon constants, permutations and sponge for prime field of the same order as BN254\npub mod perm;\npub mod consts;\n\nuse crate::hash::poseidon::absorb;\n\n// Variable-length Poseidon-128 sponge as suggested in second bullet point of section 3 of https://eprint.iacr.org/2019/458.pdf\n#[field(bn254)]\npub fn sponge<let N: u32>(msg: [Field; N]) -> Field {\n    absorb(consts::x5_5_config(), [0; 5], 4, 1, msg)[1]\n}\n\n// Various instances of the Poseidon hash function\n// Consistent with Circom's implementation\n#[no_predicates]\npub fn hash_1(input: [Field; 1]) -> Field {\n    let mut state = [0; 2];\n    for i in 0..input.len() {\n        state[i + 1] = input[i];\n    }\n\n    perm::x5_2(state)[0]\n}\n\n#[no_predicates]\npub fn hash_2(input: [Field; 2]) -> Field {\n    let mut state = [0; 3];\n    for i in 0..input.len() {\n        state[i + 1] = input[i];\n    }\n\n    perm::x5_3(state)[0]\n}\n\n#[no_predicates]\npub fn hash_3(input: [Field; 3]) -> Field {\n    let mut state = [0; 4];\n    for i in 0..input.len() {\n        state[i + 1] = input[i];\n    }\n\n    perm::x5_4(state)[0]\n}\n\n#[no_predicates]\npub fn hash_4(input: [Field; 4]) -> Field {\n    let mut state = [0; 5];\n    for i in 0..input.len() {\n        state[i + 1] = input[i];\n    }\n\n    perm::x5_5(state)[0]\n}\n\n#[no_predicates]\npub fn hash_5(input: [Field; 5]) -> Field {\n    let mut state = [0; 6];\n    for i in 0..input.len() {\n        state[i + 1] = input[i];\n    }\n\n    perm::x5_6(state)[0]\n}\n\n#[no_predicates]\npub fn hash_6(input: [Field; 6]) -> Field {\n    let mut state = [0; 7];\n    for i in 0..input.len() {\n        state[i + 1] = input[i];\n    }\n\n    perm::x5_7(state)[0]\n}\n\n#[no_predicates]\npub fn hash_7(input: [Field; 7]) -> Field {\n    let mut state = [0; 8];\n    for i in 0..input.len() {\n        state[i + 1] = input[i];\n    }\n\n    perm::x5_8(state)[0]\n}\n\n#[no_predicates]\npub fn hash_8(input: [Field; 8]) -> Field {\n    let mut state = [0; 9];\n    for i in 0..input.len() {\n        state[i + 1] = input[i];\n    }\n\n    perm::x5_9(state)[0]\n}\n\n#[no_predicates]\npub fn hash_9(input: [Field; 9]) -> Field {\n    let mut state = [0; 10];\n    for i in 0..input.len() {\n        state[i + 1] = input[i];\n    }\n\n    perm::x5_10(state)[0]\n}\n\n#[no_predicates]\npub fn hash_10(input: [Field; 10]) -> Field {\n    let mut state = [0; 11];\n    for i in 0..input.len() {\n        state[i + 1] = input[i];\n    }\n\n    perm::x5_11(state)[0]\n}\n\n#[no_predicates]\npub fn hash_11(input: [Field; 11]) -> Field {\n    let mut state = [0; 12];\n    for i in 0..input.len() {\n        state[i + 1] = input[i];\n    }\n\n    perm::x5_12(state)[0]\n}\n\n#[no_predicates]\npub fn hash_12(input: [Field; 12]) -> Field {\n    let mut state = [0; 13];\n    for i in 0..input.len() {\n        state[i + 1] = input[i];\n    }\n\n    perm::x5_13(state)[0]\n}\n\n#[no_predicates]\npub fn hash_13(input: [Field; 13]) -> Field {\n    let mut state = [0; 14];\n    for i in 0..input.len() {\n        state[i + 1] = input[i];\n    }\n\n    perm::x5_14(state)[0]\n}\n\n#[no_predicates]\npub fn hash_14(input: [Field; 14]) -> Field {\n    let mut state = [0; 15];\n    for i in 0..input.len() {\n        state[i + 1] = input[i];\n    }\n\n    perm::x5_15(state)[0]\n}\n\n#[no_predicates]\npub fn hash_15(input: [Field; 15]) -> Field {\n    let mut state = [0; 16];\n    for i in 0..input.len() {\n        state[i + 1] = input[i];\n    }\n\n    perm::x5_16(state)[0]\n}\n\n#[no_predicates]\npub fn hash_16(input: [Field; 16]) -> Field {\n    let mut state = [0; 17];\n    for i in 0..input.len() {\n        state[i + 1] = input[i];\n    }\n\n    perm::x5_17(state)[0]\n}\n",
      "path": "std/hash/poseidon/bn254.nr"
    },
    "24": {
      "source": "pub mod bn254; // Instantiations of Poseidon for prime field of the same order as BN254\nuse crate::default::Default;\nuse crate::hash::Hasher;\n\n// A config struct defining the parameters of the Poseidon instance to use.\n//\n// A thorough writeup of this method (along with an unoptimized method) can be found at: https://spec.filecoin.io/algorithms/crypto/poseidon/\npub struct PoseidonConfig<let T: u32, let N: u32, let X: u32> {\n    // State width, should be equal to `T`\n    t: Field,\n    // Number of full rounds. should be even\n    rf: u8,\n    // Number of partial rounds\n    rp: u8,\n    // S-box power; depends on the underlying field\n    alpha: Field,\n    // The round constants for the\n    round_constants: [Field; N],\n    // The MDS matrix for the Poseidon instance\n    mds: [[Field; T]; T],\n    // An MDS matrix which also applies a basis transformation which allows\n    // sparse matrices to be used for the partial rounds.\n    //\n    // This should be applied instead of `mds` in the final full round.\n    presparse_mds: [[Field; T]; T],\n    // A set of sparse matrices used for MDS mixing for the partial rounds.\n    sparse_mds: [Field; X],\n}\n\npub fn config<let T: u32, let N: u32, let X: u32>(\n    t: Field,\n    rf: u8,\n    rp: u8,\n    alpha: Field,\n    round_constants: [Field; N],\n    mds: [[Field; T]; T],\n    presparse_mds: [[Field; T]; T],\n    sparse_mds: [Field; X],\n) -> PoseidonConfig<T, N, X> {\n    // Input checks\n    assert_eq(rf & 1, 0);\n    assert_eq((t as u8) * rf + rp, N as u8);\n    assert_eq(t, T as Field);\n    assert(alpha != 0);\n\n    PoseidonConfig { t, rf, rp, alpha, round_constants, mds, presparse_mds, sparse_mds }\n}\n\npub fn permute<let T: u32, let N: u32, let X: u32>(\n    pos_conf: PoseidonConfig<T, N, X>,\n    mut state: [Field; T],\n) -> [Field; T] {\n    let PoseidonConfig { t, rf, rp, alpha, round_constants, mds, presparse_mds, sparse_mds } =\n        pos_conf;\n\n    for i in 0..state.len() {\n        state[i] += round_constants[i];\n    }\n\n    for _r in 0..rf / 2 - 1 {\n        state = sigma(state);\n        for i in 0..T {\n            state[i] += round_constants[T * (_r + 1) as u32 + i];\n        }\n        state = apply_matrix(mds, state);\n    }\n\n    state = sigma(state);\n    for i in 0..T {\n        state[i] += round_constants[T * (rf / 2) as u32 + i];\n    }\n    state = apply_matrix(presparse_mds, state);\n\n    for i in 0..T {\n        crate::as_witness(state[i]);\n    }\n\n    for _r in 0..rp {\n        state[0] = state[0].pow_32(alpha);\n        state[0] += round_constants[(rf / 2 + 1) as u32 * T + _r as u32];\n        crate::as_witness(state[0]);\n        {\n            let mut newState0 = 0;\n            for j in 0..T {\n                newState0 += sparse_mds[(T * 2 - 1) * _r as u32 + j as u32] * state[j];\n            }\n            for k in 1..T {\n                state[k] += state[0] * sparse_mds[(t * 2 - 1) as u32 * _r as u32 + T + k - 1];\n            }\n            state[0] = newState0;\n\n            if (_r & 1 == 0) {\n                for k in 1..T {\n                    crate::as_witness(state[k]);\n                }\n            }\n        }\n    }\n\n    for _r in 0..rf / 2 - 1 {\n        state = sigma(state);\n        for i in 0..state.len() {\n            state[i] += round_constants[(rf / 2 + 1) as u32 * T + rp as u32 + (_r as u32) * T + i];\n        }\n        state = apply_matrix(mds, state);\n    }\n\n    state = sigma(state);\n    state = apply_matrix(mds, state);\n\n    state\n}\n\n// Performs matrix multiplication on a vector\nfn apply_matrix<let N: u32>(matrix: [[Field; N]; N], vec: [Field; N]) -> [Field; N] {\n    let mut out = [0; N];\n\n    for i in 0..N {\n        for j in 0..N {\n            out[i] += vec[j] * matrix[j][i];\n        }\n    }\n\n    out\n}\n\n// Corresponding absorption.\nfn absorb<let T: u32, let N: u32, let X: u32, let O: u32>(\n    pos_conf: PoseidonConfig<T, N, X>,\n    // Initial state; usually [0; O]\n    mut state: [Field; T],\n    rate: Field,\n    capacity: Field,\n    msg: [Field; O], // Arbitrary length message\n) -> [Field; T] {\n    assert_eq(pos_conf.t, rate + capacity);\n\n    let mut i = 0;\n\n    for k in 0..msg.len() {\n        // Add current block to state\n        state[capacity + i] += msg[k];\n        i = i + 1;\n        // Enough to absorb\n        if i == rate {\n            state = permute(pos_conf, state);\n            i = 0;\n        }\n    }\n    // If we have one more block to permute\n    if i != 0 {\n        state = permute(pos_conf, state);\n    }\n\n    state\n}\n\nfn sigma<let O: u32>(x: [Field; O]) -> [Field; O] {\n    let mut y = x;\n    for i in 0..O {\n        let t = y[i];\n        let tt = t * t;\n        let tttt = tt * tt;\n        y[i] *= tttt;\n    }\n    y\n}\n\npub struct PoseidonHasher {\n    _state: [Field],\n}\n\nimpl Hasher for PoseidonHasher {\n    #[field(bn254)]\n    fn finish(self) -> Field {\n        let mut result = 0;\n        let len = self._state.len();\n        assert(len < 16);\n        if len == 1 {\n            result = bn254::hash_1([self._state[0]]);\n        }\n        if len == 2 {\n            result = bn254::hash_2([self._state[0], self._state[1]]);\n        }\n        if len == 3 {\n            result = bn254::hash_3([self._state[0], self._state[1], self._state[2]]);\n        }\n        if len == 4 {\n            result = bn254::hash_4([self._state[0], self._state[1], self._state[2], self._state[3]]);\n        }\n        if len == 5 {\n            result = bn254::hash_5([\n                self._state[0],\n                self._state[1],\n                self._state[2],\n                self._state[3],\n                self._state[4],\n            ]);\n        }\n        if len == 6 {\n            result = bn254::hash_6([\n                self._state[0],\n                self._state[1],\n                self._state[2],\n                self._state[3],\n                self._state[4],\n                self._state[5],\n            ]);\n        }\n        if len == 7 {\n            result = bn254::hash_7([\n                self._state[0],\n                self._state[1],\n                self._state[2],\n                self._state[3],\n                self._state[4],\n                self._state[5],\n                self._state[6],\n            ]);\n        }\n        if len == 8 {\n            result = bn254::hash_8([\n                self._state[0],\n                self._state[1],\n                self._state[2],\n                self._state[3],\n                self._state[4],\n                self._state[5],\n                self._state[6],\n                self._state[7],\n            ]);\n        }\n        if len == 9 {\n            result = bn254::hash_9([\n                self._state[0],\n                self._state[1],\n                self._state[2],\n                self._state[3],\n                self._state[4],\n                self._state[5],\n                self._state[6],\n                self._state[7],\n                self._state[8],\n            ]);\n        }\n        if len == 10 {\n            result = bn254::hash_10([\n                self._state[0],\n                self._state[1],\n                self._state[2],\n                self._state[3],\n                self._state[4],\n                self._state[5],\n                self._state[6],\n                self._state[7],\n                self._state[8],\n                self._state[9],\n            ]);\n        }\n        if len == 11 {\n            result = bn254::hash_11([\n                self._state[0],\n                self._state[1],\n                self._state[2],\n                self._state[3],\n                self._state[4],\n                self._state[5],\n                self._state[6],\n                self._state[7],\n                self._state[8],\n                self._state[9],\n                self._state[10],\n            ]);\n        }\n        if len == 12 {\n            result = bn254::hash_12([\n                self._state[0],\n                self._state[1],\n                self._state[2],\n                self._state[3],\n                self._state[4],\n                self._state[5],\n                self._state[6],\n                self._state[7],\n                self._state[8],\n                self._state[9],\n                self._state[10],\n                self._state[11],\n            ]);\n        }\n        if len == 13 {\n            result = bn254::hash_13([\n                self._state[0],\n                self._state[1],\n                self._state[2],\n                self._state[3],\n                self._state[4],\n                self._state[5],\n                self._state[6],\n                self._state[7],\n                self._state[8],\n                self._state[9],\n                self._state[10],\n                self._state[11],\n                self._state[12],\n            ]);\n        }\n        if len == 14 {\n            result = bn254::hash_14([\n                self._state[0],\n                self._state[1],\n                self._state[2],\n                self._state[3],\n                self._state[4],\n                self._state[5],\n                self._state[6],\n                self._state[7],\n                self._state[8],\n                self._state[9],\n                self._state[10],\n                self._state[11],\n                self._state[12],\n                self._state[13],\n            ]);\n        }\n        if len == 15 {\n            result = bn254::hash_15([\n                self._state[0],\n                self._state[1],\n                self._state[2],\n                self._state[3],\n                self._state[4],\n                self._state[5],\n                self._state[6],\n                self._state[7],\n                self._state[8],\n                self._state[9],\n                self._state[10],\n                self._state[11],\n                self._state[12],\n                self._state[13],\n                self._state[14],\n            ]);\n        }\n\n        result\n    }\n\n    #[inline_always]\n    fn write(&mut self, input: Field) {\n        self._state = self._state.push_back(input);\n    }\n}\n\nimpl Default for PoseidonHasher {\n    fn default() -> Self {\n        PoseidonHasher { _state: &[] }\n    }\n}\n\nmod poseidon_tests {\n    use crate::hash::poseidon;\n\n    #[test]\n    fn reference_impl_test_vectors() {\n        // hardcoded test vectors from https://extgit.iaik.tugraz.at/krypto/hadeshash/-/blob/master/code/test_vectors.txt\n        {\n            let mut state = [0, 1, 2];\n            let mut expected = [\n                0x115cc0f5e7d690413df64c6b9662e9cf2a3617f2743245519e19607a4417189a,\n                0x0fca49b798923ab0239de1c9e7a4a9a2210312b6a2f616d18b5a87f9b628ae29,\n                0x0e7ae82e40091e63cbd4f16a6d16310b3729d4b6e138fcf54110e2867045a30c,\n            ];\n            assert_eq(\n                expected,\n                poseidon::bn254::perm::x5_3(state),\n                \"Failed to reproduce output for [0, 1, 2]\",\n            );\n        }\n        {\n            let mut state = [0, 1, 2, 3, 4];\n            let mut expected = [\n                0x299c867db6c1fdd79dcefa40e4510b9837e60ebb1ce0663dbaa525df65250465,\n                0x1148aaef609aa338b27dafd89bb98862d8bb2b429aceac47d86206154ffe053d,\n                0x24febb87fed7462e23f6665ff9a0111f4044c38ee1672c1ac6b0637d34f24907,\n                0x0eb08f6d809668a981c186beaf6110060707059576406b248e5d9cf6e78b3d3e,\n                0x07748bc6877c9b82c8b98666ee9d0626ec7f5be4205f79ee8528ef1c4a376fc7,\n            ];\n            assert_eq(\n                expected,\n                poseidon::bn254::perm::x5_5(state),\n                \"Failed to reproduce output for [0, 1, 2, 3, 4]\",\n            );\n        }\n    }\n}\n",
      "path": "std/hash/poseidon/mod.nr"
    },
    "61": {
      "source": "use ec::bjj::BabyJubJubParams;\nuse ec::Curve;\nuse ec::scalar_field::ScalarField;\nuse std::field::bn254::assert_lt;\nuse std::hash::poseidon::bn254::hash_2 as poseidon;\n\n// The maximum depth of the Merkle Tree the inclusion proof will be coming from.\n// This value can get updated by overwriting this line.\npub global MAX_DEPTH: u32 = 4;\n\n// Generator point of Baby Jubjub curve.\n// ref: https://github.com/noir-lang/noir-edwards/blob/main/src/test.nr#L6C8-L6C13\nglobal BASE8: [Field; 2] = [\n    5299619240641551281634865583518297030282874472190772894086521144482721001553,\n    16950150798460657717958625567821834550301663161624707787222815936182638968203,\n];\n\n// This is a 251 bit value.\nglobal L: Field = 2736030358979909402780800718157159386076813972158567259200215660948447373041;\n\n// There are 3 main steps in the Noir program.\n// - The first part generates the Semaphore identity by obtaining\n//   the public key from the secret key and consequently hash the public key.\n//   This resulting hash is the identity_commitment.\n// - In the second part, it is verified that the identity_commitment is indeed\n//   part of the merkle tree by calculating the merkleRoot using the merkle proof.\n// - In the third part the nullifier is generated by hashing the hashed_scope\n//   with the secret key.\n//\n// There are 4 public values: hashed scope, hashed message, the nullifier and the\n// the Merkle tree root. Whether the scope and message are actually hashed doesn't\n// affect the circuit; the names just match how they're used in the Semaphore SDK.\n//\n// The message is tied to the circuit by adding it as a (public) input to the circuit.\n//\n// Returns: (Merkle tree root, nullifier)\nfn main(\n    secret_key: Field,\n    index_bits: [u1; MAX_DEPTH], // these bits indicate the order of inputs for hashing of the merkle proof\n    hash_path: [Field; MAX_DEPTH], // the Merkle Tree inclusion proof\n    merkle_proof_length: u32, // the number of non-zero elements in hash_path\n    hashed_scope: pub Field,\n    hashed_message: pub Field,\n) -> pub (Field, Field) {\n    // Part 1\n    // Ensure secret_key < l.\n    assert_lt(secret_key, L);\n\n    // Identity generation.\n    // The public key is derived by multiplying the generator point with the secret key,\n    // interpreted as a scalar.\n    let generator: Curve<BabyJubJubParams> = Curve { x: BASE8[0], y: BASE8[1] };\n    // ScalarField is parameterised by the number of 4-bit slices it contains.\n    // Since secret key is already known to be max 251 bits, there are 63 slices.\n    let secret_scalar: ScalarField<63> = ScalarField::from(secret_key);\n    let pubkey = generator.mul(secret_scalar);\n\n    // Obtain the identity commitment by hashing the public key\n    let identity_commitment = poseidon([pubkey.x, pubkey.y]);\n\n    // Part 2\n    // Verifies membership by repeatedly hashing with the elements from the merkle proof.\n    // Depending on the index bit, we swap the siblings for hashing or not.\n    let mut node = identity_commitment;\n    for i in 0..MAX_DEPTH {\n        if i < merkle_proof_length {\n            let sibling = hash_path[i];\n            let (left, right) = if index_bits[i] == 0 {\n                (node, sibling)\n            } else {\n                (sibling, node)\n            };\n            node = poseidon([left, right]);\n        }\n    }\n\n    // Part 3\n    // Obtain the nullifier by hashing the hashed scope and secret key.\n    let nullifier = poseidon([hashed_scope, secret_key]);\n\n    // Return the calculated Merkle tree root & nullifier\n    (node, nullifier)\n}\n\n#[test]\nfn pass_merkleproof_len1() {\n    let secret_key = 2736030358979909402780800718157159386076813972158567259200215660948447373040;\n    let mut index_bits = [0; MAX_DEPTH];\n    index_bits[0] = 1;\n    let mut hash_path = [0; MAX_DEPTH];\n    hash_path[0] = 17197790661637433027297685226742709599380837544520340689137581733613433332983;\n    let merkle_proof_length = 1;\n    let hashed_scope = 32;\n    let message_input = 43;\n\n    let (merkle_root_output, nullifier_output) = main(\n        secret_key,\n        index_bits,\n        hash_path,\n        merkle_proof_length,\n        hashed_scope,\n        message_input,\n    );\n\n    assert(\n        merkle_root_output\n            == 14749601632619677010117355190090900871659822873947496064081607008658671249718,\n    );\n    assert(\n        nullifier_output\n            == 17372857233400574021114979593304691729475458770275659856062929947081629926774,\n    );\n}\n\n#[test]\nfn pass_merkleproof_len2() {\n    let secret_key = 2736030358979909402780800718157159386076813972158567259200215660948447373040;\n    let mut index_bits = [0; MAX_DEPTH];\n    index_bits[0] = 1;\n    index_bits[1] = 1;\n    let mut hash_path = [0; MAX_DEPTH];\n    hash_path[0] = 222;\n    hash_path[1] = 5580148635681152038824579634153994374025422922042242905608547916566050510583;\n    let merkle_proof_length = 2;\n    let hashed_scope = 32;\n    let message_input = 43;\n\n    let (merkle_root_output, nullifier_output) = main(\n        secret_key,\n        index_bits,\n        hash_path,\n        merkle_proof_length,\n        hashed_scope,\n        message_input,\n    );\n\n    assert(\n        merkle_root_output\n            == 15463896243170667872144918581954291954064138644202866266871757140238856236252,\n    );\n    assert(\n        nullifier_output\n            == 17372857233400574021114979593304691729475458770275659856062929947081629926774,\n    );\n}\n\n#[test]\nfn pass_merkleproof_len10() {\n    let secret_key = 2736030358979909402780800718157159386076813972158567259200215660948447373040;\n    let mut index_bits = [1; MAX_DEPTH];\n    let mut hash_path = [0; MAX_DEPTH];\n    hash_path[0] = 1023;\n    hash_path[1] = 7703609393926148861806470850414101587282113463695008072842235608796379066550;\n    hash_path[2] = 11844355347052921836263554861941946966048634969958623466081587590542465759133;\n    hash_path[3] = 19139877065885635288462009770448247355705152266967089952432395406553642434273;\n    hash_path[4] = 15968895708437223385516840363948747630018846839139338811061474982723265688336;\n    hash_path[5] = 1157389113544196424312834359849712044068249869160475042631259223915679649526;\n    hash_path[6] = 9850169485007128596840836882853679679304108948486378818337816937810456934767;\n    hash_path[7] = 7328698264973484546168581905250553935177218888248684409634832044961836320061;\n    hash_path[8] = 3637363514134115024343666241307349483158812906758472113070175697206757306389;\n    hash_path[9] = 7516686158158401448998320090358910253731148596461412688165783659432576569650;\n    let merkle_proof_length = 10;\n    let hashed_scope = 32;\n    let message_input = 43;\n\n    let (merkle_root_output, nullifier_output) = main(\n        secret_key,\n        index_bits,\n        hash_path,\n        merkle_proof_length,\n        hashed_scope,\n        message_input,\n    );\n\n    assert(\n        merkle_root_output\n            == 2057311462964865392236711171061056405638996999335557516757935831793017666139,\n    );\n    assert(\n        nullifier_output\n            == 17372857233400574021114979593304691729475458770275659856062929947081629926774,\n    );\n}\n\n#[test(should_fail)]\nfn fail_secret_key_outofrange() {\n    let secret_key = 2736030358979909402780800718157159386076813972158567259200215660948447373042;\n    let mut index_bits = [0; MAX_DEPTH];\n    index_bits[0] = 1;\n    let mut hash_path = [0; MAX_DEPTH];\n    hash_path[0] = 17197790661637433027297685226742709599380837544520340689137581733613433332983;\n    let merkle_proof_length = 1;\n    let hashed_scope = 32;\n    let message_input = 43;\n\n    let _ = main(\n        secret_key,\n        index_bits,\n        hash_path,\n        merkle_proof_length,\n        hashed_scope,\n        message_input,\n    );\n}\n",
      "path": "/Users/elena/Documents/hashcloak/clients/Aztec/semaphore_grant_related/semaphore-noir/packages/circuits-noir/src/main.nr"
    },
    "63": {
      "source": "mod scalar_field;\nmod test;\nmod bjj;\n\npub use crate::scalar_field::ScalarField;\nuse std::ops::{Add, Neg, Sub};\n\npub struct Curve<Params> {\n    x: Field,\n    y: Field,\n}\n\n// ####################################################################################################################\n// ####################################################################################################################\n// ### T R A I T S\n// ####################################################################################################################\n// ####################################################################################################################\n\n/// Parametrises a Twisted Edwards curve\ntrait TECurveParameterTrait {\n    fn a() -> Field; // twisted edward curve parameter a\n    fn d() -> Field; // twisted edward curve parameter d\n    fn gen() -> (Field, Field); // generator point x/y coordinates\n}\n\n/// Defines methods that a valid Curve implementation must satisfy\ntrait CurveTrait<Params>: Add + Sub + Eq + Neg + Default {\n    fn new(x: Field, y: Field) -> Self;\n    fn zero() -> Self;\n    fn one() -> Self;\n    fn dbl(self) -> Self;\n    fn mul<let NScalarSlices: u32>(self, x: ScalarField<NScalarSlices>) -> Self;\n    fn msm<let N: u32, let NScalarSlices: u32>(\n        points: [Self; N],\n        scalars: [ScalarField<NScalarSlices>; N],\n    ) -> Self;\n\n    fn eq(self, x: Self) -> bool {\n        self == x\n    }\n    fn is_zero(self) -> bool {\n        self == Self::zero()\n    }\n\n    fn is_on_curve(self) -> bool;\n    fn assert_is_on_curve(self);\n    fn assert_equal(self, other: Self);\n}\n\n// ####################################################################################################################\n// ####################################################################################################################\n// ### C O N S T R A I N E D    F U N C T I O N S\n// ####################################################################################################################\n// ####################################################################################################################\nimpl<Params> std::default::Default for Curve<Params>\nwhere\n    Params: TECurveParameterTrait,\n{\n    /// Returns point at infinity\n    ///\n    /// Cost: 0 gates\n    fn default() -> Self {\n        Curve::zero()\n    }\n}\n\nimpl<Params> std::ops::Add for Curve<Params>\nwhere\n    Params: TECurveParameterTrait,\n{\n    /// Compute `self + other`\n    ///\n    /// Cost: 7 gates\n    fn add(self, other: Self) -> Self {\n        Curve::add_internal(self, other, Params::a(), Params::d())\n    }\n}\n\nimpl<Params> std::ops::Neg for Curve<Params> {\n    /// Negate a point\n    ///\n    /// Cost: usually 0, will cost 1 gate if the `x` coordinate needs to be converted into a witness\n    fn neg(self) -> Self {\n        Curve { x: -self.x, y: self.y }\n    }\n}\n\nimpl<Params> std::ops::Sub for Curve<Params>\nwhere\n    Params: TECurveParameterTrait,\n{\n    /// Compute `self - other`\n    ///\n    /// Cost: 7 gates\n    fn sub(self, other: Self) -> Self {\n        Curve::add_internal(self, other.neg(), Params::a(), Params::d())\n    }\n}\n\nimpl<Params> std::cmp::Eq for Curve<Params> {\n    /// Compute `self == other`\n    ///\n    /// Cost: 6 gates\n    fn eq(self, other: Self) -> bool {\n        (self.x == other.x) & (self.y == other.y)\n    }\n}\n\nimpl<Params> std::convert::From<(Field, Field)> for Curve<Params> {\n    /// Construct from tuple of field elements\n    ///\n    /// Use this method instead of `new` if you know x/y is on the curve\n    ///\n    /// Cost: 0 gates\n    fn from((x, y): (Field, Field)) -> Self {\n        Curve { x, y }\n    }\n}\n\nimpl<Params> CurveTrait<Params> for Curve<Params>\nwhere\n    Params: TECurveParameterTrait,\n{\n\n    /// Construct a new point\n    ///\n    /// If you know the x/y coords form a valid point DO NOT USE THIS METHOD\n    /// This method calls `assert_is_on_curve` which costs 3 gates.\n    /// Instead, directly construct via Curve{x, y} or use from((x, y))\n    ///\n    /// Cost: 3 gates\n    fn new(x: Field, y: Field) -> Self {\n        let result = Curve { x, y };\n        result.assert_is_on_curve();\n        result\n    }\n\n    /// Return the Identity element (point at infinity)\n    ///\n    /// Cost: 0 gates\n    fn zero() -> Self {\n        Curve { x: 0, y: 1 }\n    }\n\n    /// Return the Generator of the group\n    ///\n    /// Cost: 0 gates (assuming Params trait returns values known at compile time!)\n    fn one() -> Self {\n        let (x, y) = Params::gen();\n        Curve { x, y }\n    }\n\n    /// Validate a point is on the curve\n    ///\n    /// cheaper than `is_on_curve` (assert is cheaper than returning a bool)\n    ///\n    /// Cost: 3 gates\n    fn assert_is_on_curve(self) {\n        let t0 = self.x * self.x;\n        let t1 = self.y * self.y;\n        std::as_witness(t0);\n        std::as_witness(t1);\n        let t2 = Params::a() * t0 + t1;\n        let t3 = 1 + Params::d() * t0 * t1;\n        assert(t2 == t3);\n    }\n\n    /// Constrain two points to equal each other\n    ///\n    /// Cheaper than `assert(self == other)` because no need to return a bool\n    ///\n    /// Cost: 0-2 gates (can do these asserts with just copy constraints)\n    fn assert_equal(self, other: Self) {\n        assert(self.x == other.x);\n        assert(self.y == other.y);\n    }\n\n    /// Return a bool that describes whether the point is on the curve\n    ///\n    /// If you don't need to handle the failure case, it is cheaper to call `assert_is_on_curve`\n    ///\n    /// Cost: 5 gates\n    fn is_on_curve(self) -> bool {\n        let t0 = self.x * self.x;\n        let t1 = self.y * self.y;\n        std::as_witness(t0);\n        std::as_witness(t1);\n        let t2 = Params::a() * t0 + t1;\n        let t3 = 1 + Params::d() * t0 * t1;\n        (t2 == t3)\n    }\n\n    /// Compute `self + self`\n    ///\n    /// Cost: 5 gates\n    fn dbl(self) -> Self {\n        Curve::dbl_internal(self, Params::a(), Params::d())\n    }\n\n    /// Compute `self * scalar`\n    ///\n    /// Uses the Straus method via lookup tables.\n    /// Assumes backend has an efficient implementation of a memory table abstraction\n    /// i.e. `let x = table[y]` is efficient even if `y` is not known at compile time\n    ///\n    /// Key cost components are as follows:\n    ///      1: computing the Straus point lookup table (169 gates)\n    ///      2: 252 point doublings (1260 gates)\n    ///      3: 63 point additions (441 gates)\n    ///      4: 126 table reads with runtime index (252 gates)\n    ///\n    /// Cost: 2122 gates + cost of creating ScalarField (110 gates)\n    ///\n    /// TODO: use windowed non-adjacent form to remove 7 point additions when creating lookup table\n    fn mul<let NScalarSlices: u32>(self: Self, scalar: ScalarField<NScalarSlices>) -> Self {\n        // define a, d params locally to make code more readable (shouldn't affect performance)\n        let a = Params::a();\n        let d = Params::d();\n\n        // Construct tables of precomputed point coordinates.\n        let (table_x, table_y): ([Field; 16], [Field; 16]) = self.compute_straus_point_table(a, d);\n\n        // Initialize the accumulator with the point that maps to the first (most significant) scalar slice\n        let idx = scalar.base4_slices[0];\n        let mut accumulator: Self = Curve { x: table_x[idx], y: table_y[idx] };\n\n        // Execute a double-and-add subroutine\n        // 1. Compute `accumulator = accumulator * 16`\n        // 2. Extract 4-bits from the scalar multiplier and\n        //    use them to retrieve the corresponding point from our point table\n        // Note: this is similar to the \"double and add\" scalar multiplication method, except we use base16 instead of base2!\n        for i in 1..NScalarSlices {\n            accumulator = accumulator.dbl_internal(a, d);\n            accumulator = accumulator.dbl_internal(a, d);\n            accumulator = accumulator.dbl_internal(a, d);\n            accumulator = accumulator.dbl_internal(a, d);\n            let idx: u8 = scalar.base4_slices[i];\n            let x = table_x[idx];\n            let y = table_y[idx];\n            accumulator = accumulator.add_internal(Curve { x, y }, a, d);\n        }\n\n        // todo fix\n        if (scalar.skew) {\n            accumulator = accumulator - self;\n        }\n        accumulator\n    }\n\n    /// compute `points[0] * scalar[0] + ... + points[N-1] * scalar[N-1]`\n    ///\n    /// Is cheaper than `mul` when processing >1 point due to reduced number of point doublings\n    /// uses the Straus MSM method via lookup tables.\n    /// Assumes backend has an efficient implementation of a memory table abstraction\n    /// i.e. `let x = table[y]` is efficient even if `y` is not known at compile time\n    ///\n    /// Key cost components are as follows\n    /// PER POINT costs:\n    ///      1: computing the Straus point lookup table (169N gates)\n    ///      2: 63 point additions (441N gates)\n    ///      3: 126 table reads with runtime index (252N gates)\n    ///\n    /// Additional costs:\n    ///      1. 252 point doublings 1260 gates\n    ///\n    /// Cost: 1260 + 862N + cost of creating ScalarField (110N gates)\n    ///\n    /// TODO: use windowed non-adjacent form to remove 7 point additions per point when creating lookup table\n    fn msm<let N: u32, let NScalarSlices: u32>(\n        points: [Self; N],\n        scalars: [ScalarField<NScalarSlices>; N],\n    ) -> Self {\n        let a = Params::a();\n        let d = Params::d();\n\n        // Generalized version of `mul` for multiple points.\n        let mut point_tables: [([Field; 16], [Field; 16]); N] = [([0; 16], [0; 16]); N];\n        for j in 0..N {\n            point_tables[j] = points[j].compute_straus_point_table(a, d);\n        }\n\n        let idx = scalars[0].base4_slices[0];\n        let mut accumulator: Self = Curve { x: point_tables[0].0[idx], y: point_tables[0].1[idx] };\n        for j in 1..N {\n            let idx = scalars[j].base4_slices[0];\n            let P = Curve { x: point_tables[j].0[idx], y: point_tables[j].1[idx] };\n            accumulator = accumulator.add_internal(P, a, d);\n        }\n        for i in 1..NScalarSlices {\n            accumulator = accumulator.dbl_internal(a, d);\n            accumulator = accumulator.dbl_internal(a, d);\n            accumulator = accumulator.dbl_internal(a, d);\n            accumulator = accumulator.dbl_internal(a, d);\n            for j in 0..N {\n                let idx: u8 = scalars[j].base4_slices[i];\n                let x = point_tables[j].0[idx];\n                let y = point_tables[j].1[idx];\n                accumulator = accumulator.add_internal(Curve { x, y }, a, d);\n            }\n        }\n\n        for j in 0..N {\n            if (scalars[j].skew == true) {\n                accumulator = accumulator - points[j];\n            }\n        }\n        accumulator\n    }\n}\n\n// ####################################################################################################################\n// ####################################################################################################################\n// ### H E L P E R    F U N C T I O N S\n// ####################################################################################################################\n// ####################################################################################################################\nimpl<Params> Curve<Params> {\n\n    /// add two points together\n    ///\n    /// This method exists because of a Noir bug where `Params` cannot be accessed by an internal function\n    /// called from internal function. e.g. compiler error if `mul` impl tries to call `add` :(\n    fn add_internal(self, other: Self, a: Field, d: Field) -> Self {\n        let x1 = self.x;\n        let x2 = other.x;\n        let y1 = self.y;\n        let y2 = other.y;\n        let (x, y, lambda) = unsafe { __add_unconstrained(x1, x2, y1, y2, a, d) };\n        let x1x2 = x1 * x2;\n        let x1y2 = x1 * y2;\n        std::as_witness(x1x2);\n        std::as_witness(x1y2);\n        let x_lhs = x * lambda * d + x - x1y2; // equals y1x2\n        let y_lhs = y * lambda * -d + y + x1x2 * a; // equals y1y2\n        let y1x2 = y1 * x2;\n        let y1y2 = y1 * y2;\n        std::as_witness(y1x2);\n        std::as_witness(y1y2);\n        let y1y2x1x2 = y1y2 * x1x2;\n        assert(x_lhs == y1x2);\n        assert(y_lhs == y1y2);\n        assert(y1y2x1x2 == lambda);\n        Self { x, y }\n    }\n\n    /// add a point to itself\n    ///\n    /// This method exists because of a Noir bug where `Params` cannot be accessed by an internal function\n    /// called from internal function. e.g. compiler error if `mul` impl tries to call `dbl` :(\n    fn dbl_internal(self, a: Field, d: Field) -> Self {\n        let x1 = self.x;\n        let y1 = self.y;\n        let (x3, y3, _) = unsafe { __add_unconstrained(x1, x1, y1, y1, a, d) };\n        let x1x1a = x1 * x1 * a;\n        std::as_witness(x1x1a);\n        // t1 = a*x_1^2 + y_1^2\n        let t1 = y1 * y1 + x1x1a;\n        std::as_witness(t1);\n        // t3 = y_3 * (2 - a*x_1^2 + y_1^2) + 2*a*x_1^2\n        let t3 = y3 + y3 - t1 * y3 + x1x1a * 2;\n        // t3 == t1 implies y_3 * (2 - a*x_1^2 - y_1^2) + 2*a*x_1^2 == a*x_1^2 + y_1^2\n        // i.e. y_3 = y_1^2 - a*x_1^2 / (2 - a*x_1^2 - y_1^2)\n        assert(t3 == t1);\n        let t4 = x1 * y1;\n        std::as_witness(t4);\n        // x3 * t1 - t4 == t4 implies x_3 * (y_1^2 + a * x_1^2) = 2 * x_1 * y_1\n        // i.e. x_3 = 2 * x_1 * y_1 / (y_1^2 + a * x_1^2)\n        let t2 = x3 * t1 - t4;\n        assert(t2 == t4);\n        Self { x: x3, y: y3 }\n    }\n\n    /// Compute a 4-bit lookup table of point multiples for the Straus windowed scalar multiplication algorithm.\n    ///\n    /// Table contains [0, P, 2P, ..., 15P], which is used in the scalar mul algorithm to minimize the total number of required point additions\n    ///\n    /// It is cheaper to use ([Field; 16], [Field; 16]) than it is ([Curve; 16]).\n    /// This is because the compiler will represent [Curve; 16] in 1 ROM array (vs 2 for [Field; 16], [Field; 16]).\n    /// This means that any index into the ROM array for [Curve; 16] requires an additional arithmetic gate to process.\n    ///\n    ///      For example consider `let P: Curve = table[idx]`\n    ///      `table` will be a ROM array with 32 elements in it.\n    ///      The x-coordinates will be located at `2 * idx`\n    ///      The y-coordinates will be located at `2 * idx + 1`\n    ///      If `idx` is not known at compile time (for Straus it isnt), 2 arithmetic gates are required to evaluate `2 * idx`, `2 * idx + 1`\n    ///      before they can be used as arguments in a memory lookup protocol\n    ///\n    ///      Now consider `let P_x = table_x[idx]; let P_y = table_y[idx]`\n    ///      In this example, `idx` can be directly used as the argument into a memory lookup protocol for both tables.\n    ///\n    ///      For the Barretenberg backend, the cost of a Read-Only memory lookup is 2 gates,\n    ///      so splitting the x/y coordinates into separate tables means that the cost to lookup a point is 4 gates\n    ///      2 extra arithmetic gates would increase the cost by 50%, which we avoid by returning `([Field; 16], [Field; 16])` instead of `([Curve; 16])`\n    ///\n    /// Key cost components are as follows:\n    ///      1: Defining two size-16 lookup tables (2 gates per element, 32 elements = 64 gates)\n    ///      2: 15 point additions (7 * 5 = 105)\n    ///\n    /// Total Cost: 169 gates\n    ///\n    /// TODO: use windowed non-adjacent form to remove 8 point additions\n    fn compute_straus_point_table(self, a: Field, d: Field) -> ([Field; 16], [Field; 16]) {\n        let mut table_x: [Field; 16] = [0; 16];\n        let mut table_y: [Field; 16] = [0; 16];\n        table_x[8] = self.x;\n        table_y[8] = self.y;\n        let D = self.dbl_internal(a, d);\n        for i in 1..8 {\n            let Q = Self { x: table_x[7 + i], y: table_y[7 + i] };\n            let V = D.add_internal(Q, a, d);\n            table_x[8 + i] = V.x;\n            table_y[8 + i] = V.y;\n        }\n        for i in 0..8 {\n            table_x[i] = -table_x[15 - i];\n            table_y[i] = table_y[15 - i];\n        }\n        (table_x, table_y)\n    }\n}\n\n/// add points together, return output + lambda ter\nunconstrained fn __add_unconstrained(\n    x1: Field,\n    x2: Field,\n    y1: Field,\n    y2: Field,\n    a: Field,\n    d: Field,\n) -> (Field, Field, Field) {\n    let lambda = y1 * y2 * x1 * x2;\n    let y = (x1 * x2 * a - y1 * y2) / (lambda * d - 1);\n    let x = (x1 * y2 + y1 * x2) / (lambda * d + 1);\n    (x, y, lambda)\n}\n",
      "path": "/Users/elena/nargo/github.com/noir-lang/noir-edwards/v0.1.1/src/lib.nr"
    },
    "64": {
      "source": "/// ScalarField represents a scalar multiplier as a sequence of 4-bit slices\n///\n/// There is nuance to ScalarField, because twisted edwards curves generally have prime group orders that easily fit into a Field\n/// We can therefore obtain cheap conversions by simply summing up the bit slices and validate they equal the input scalar\n/// However...when converting arbitrary field elements (i.e. scalars that are multiples of a TE curve group order),\n/// we must perform additional checks when converting into 4-bit slices, as we must validate that the sum of the slices is smaller than the Field modulus (when evaluated over the integers)\n/// This is expensive and we would rather not do it! therefore ScalarField<N> is flexible.\n/// ScalarField<63> enables cheap bitslice converions for scalar multipliers that must be <2^{252}\n/// ScalarField<64> enables bitslice conversions for arbitrary field elements\n///\n/// N.B. ScalarField bit values are not constrained to be smaller than the TE curve group order.\n/// ScalarField is used when performing scalar multiplications, where all operations wrap modulo the curve order\npub struct ScalarField<let N: u32> {\n    pub(crate) base4_slices: [u8; N],\n    pub(crate) skew: bool,\n}\n\nunconstrained fn get_wnaf_slices<let N: u32>(x: Field) -> ([u8; N], bool) {\n    let mut result: [u8; N] = [0; N];\n    let mut nibbles: [u8; N] = x.to_le_radix(16);\n\n    let skew: bool = nibbles[0] & 1 == 0;\n    nibbles[0] += skew as u8;\n    result[N - 1] = (nibbles[0] + 15) / 2;\n    for i in 1..N {\n        let mut nibble: u8 = nibbles[i];\n        result[N - 1 - i] = (nibble + 15) / 2;\n        if (nibble & 1 == 0) {\n            result[N - 1 - i] += 1;\n            result[N - i] -= 8;\n        }\n    }\n    (result, skew)\n}\n\nunconstrained fn from_wnaf_slices(x: [u8; 64], skew: bool) -> Field {\n    let mut result: Field = 0;\n\n    for i in 0..64 {\n        result *= 16;\n        result += (x[i] as Field) * 2 - 15;\n    }\n    result -= skew as Field;\n    result\n}\n\n#[test]\nfn test_wnaf() {\n    unsafe {\n        let result: Field = 0x123456789abcdef0123456789abcdef0123456789abcdef0123456789abcdef0;\n        let (t0, t1) = get_wnaf_slices(result);\n        let expected = from_wnaf_slices(t0, t1);\n        assert(result == expected);\n    }\n}\n\ncomptime fn get_modulus_slices() -> (Field, Field) {\n    let bytes = std::field::modulus_be_bytes();\n    let num_bytes = std::field::modulus_num_bits() / 8;\n    let mut lo: Field = 0;\n    let mut hi: Field = 0;\n    for i in 0..(num_bytes / 2) {\n        hi *= 256;\n        hi += bytes[i] as Field;\n        lo *= 256;\n        lo += bytes[i + (num_bytes / 2)] as Field;\n    }\n    if (num_bytes & 1 == 1) {\n        lo *= 256;\n        lo += bytes[num_bytes - 1] as Field;\n    }\n    (lo, hi)\n}\n\nunconstrained fn get_borrow_flag(lhs_lo: Field, rhs_lo: Field) -> bool {\n    lhs_lo.lt(rhs_lo + 1)\n}\nimpl<let N: u32> std::convert::From<Field> for ScalarField<N> {\n\n    /// Construct from a field element\n    ///\n    /// if N >= 64 we perform extra checks to ensure the slice decomposition represents the same integral value as the input\n    /// (e.g. sum of slices != x + modulus)\n    fn from(x: Field) -> Self {\n        let mut result: Self = ScalarField { base4_slices: [0; N], skew: false };\n        let (slices, skew): ([u8; N], bool) = unsafe { get_wnaf_slices(x) };\n        result.base4_slices = slices;\n        result.skew = skew;\n        if (N < 64) {\n            let mut acc: Field = (slices[0] as Field) * 2 - 15;\n            for i in 1..N {\n                acc *= 16;\n                acc += (slices[i] as Field) * 2 - 15;\n            }\n            assert(acc - skew as Field == x);\n        } else {\n            // TODO: if num bits = 64, validate in sum of the bits is smaller than the Field modulus\n            let mut lo: Field = slices[(N / 2)] as Field;\n            let mut hi: Field = slices[0] as Field;\n            let mut borrow_shift = 1;\n            for i in 1..(N / 2) {\n                borrow_shift *= 16;\n                lo *= 16;\n                lo += (slices[(N / 2) + i] as Field) * 2 - 15;\n                hi *= 16;\n                hi += (slices[i] as Field) * 2 - 15;\n            }\n            if ((N & 1) == 1) {\n                borrow_shift *= 16;\n                lo *= 16;\n                lo += (slices[N - 1] as Field) * 2 - 15;\n            }\n            lo -= skew as Field;\n            // Validate that the integer represented by (lo, hi) is smaller than the integer represented by (plo, phi)\n            let (plo, phi) = comptime { get_modulus_slices() };\n            unsafe {\n                // Safety: `borrow`'s value is constrained to be correct by below range constraints.\n                let borrow = get_borrow_flag(plo, lo) as Field;\n\n                let rlo = plo - lo + borrow * borrow_shift - 1; // -1 because we are checking a strict <, not <=\n                let rhi = phi - hi - borrow;\n                rlo.assert_max_bit_size::<(N / 2 + N % 2) * 4>();\n                rhi.assert_max_bit_size::<N / 2 * 4>();\n            }\n        }\n        for i in 0..N {\n            (result.base4_slices[i] as Field).assert_max_bit_size::<4>();\n        }\n        result\n    }\n}\n\nimpl<let N: u32> std::convert::Into<Field> for ScalarField<N> {\n\n    /// Construct from tuple of field elements\n    ///\n    /// Use this method instead of `new` if you know x/y is on the curve\n    fn into(self: Self) -> Field {\n        let mut acc: Field = 0;\n        for i in 0..N {\n            acc = acc * 16;\n            acc = acc + (self.base4_slices[i] as Field) * 2 - 15;\n        }\n        acc -= self.skew as Field;\n        acc\n    }\n}\n\nimpl<let N: u32> ScalarField<N> {\n\n    pub fn new() -> Self {\n        Self { base4_slices: [0; N], skew: false }\n    }\n    fn get(self, idx: u64) -> u8 {\n        self.base4_slices[idx]\n    }\n}\n",
      "path": "/Users/elena/nargo/github.com/noir-lang/noir-edwards/v0.1.1/src/scalar_field.nr"
    }
  },
  "names": ["main"],
  "brillig_names": [
    "decompose_hint",
    "lte_hint",
    "get_wnaf_slices",
    "__add_unconstrained",
    "directive_integer_quotient"
  ]
}
